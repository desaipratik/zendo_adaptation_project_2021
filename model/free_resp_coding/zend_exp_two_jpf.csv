,Unnamed: 0,room,token_id,rule_name,rule_description,prior_feedback,bound_vars,prior_resp,prior_resp_bonan,posterior_feedback,bound_vars_post,post_resp,post_resp_bonan,bn_check
0,0,p3GmbED9fU,MtEvu0o0rASdzj0RAAAB,Kappa,at least one is blue AND small,I think that the small blue cone aids in the kappa waves radiation. I think there must be at least one small blue cone  standing up in order to emit the radiation.,[['x1']],"Z.atleast(lambda x1: Z.and_operator(Z.and_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,1,'size')),Z.equal(x1,'upright','orientation')),1,X)",bonan's rule,I believe that the small blue cone standing up is what help emit the radiation. The cone on its side does not have the same affect.,[['x1']],"Z.atleast(lambda x1: Z.and_operator(Z.and_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,1,'size')),Z.equal(x1,'upright','orientation')),1,X)",bonan's rule,0
1,1,p3GmbED9fU,MtEvu0o0rASdzj0RAAAB,Omega,all are blue OR small,The medium blue triangle is what makes the omega waves,[['x1']],"Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,2,'size')),X)",bonan's rule,I believe the medium blue triangle emits the radiation,[['x1']],"Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,2,'size')),X)",bonan's rule,0
2,2,p3GmbED9fU,MtEvu0o0rASdzj0RAAAB,Zeta,there is a red,Any red triangle will generate the radiation,[['x1']],"Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)",bonan's rule,Any red triangle will generate the radiation,[['x1']],"Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)",bonan's rule,0
3,3,p3GmbED9fU,MtEvu0o0rASdzj0RAAAB,Iota,one is blue,Any blue triangle will emit the radiation,[['x1']],"Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)",bonan's rule,Any blue triangle will make the radiation emit.,[['x1']],"Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)",bonan's rule,1
4,4,p3GmbED9fU,MtEvu0o0rASdzj0RAAAB,Upsilon,none are upright,It must contain a medium or small red triangle and the other color triangles cannot be standing.,"[['x1'],['x1','x2']]","Z.exists(lambda x1: Z.forall(lambda x2: Z.and_operator(Z.and_operator(Z.equal(x1,'red','colour'),Z.or_operator(Z.equal(x1,1,'size'),Z.equal(x1,2,'size'))), Z.and_operator(Z.not_operator(Z.equal(x2,'red','colour')), Z.not_operator(Z.equal(x2,'upright','orientation')))),X),X)",bonan's rule,must contain small or medium red triangle and other color triangle cannot be standing,"[['x1'],['x1','x2']]","Z.exists(lambda x1: Z.forall(lambda x2: Z.and_operator(Z.and_operator(Z.equal(x1,'red','colour'),Z.or_operator(Z.equal(x1,1,'size'),Z.equal(x1,2,'size'))), Z.and_operator(Z.not_operator(Z.equal(x2,'red','colour')), Z.not_operator(Z.equal(x2,'upright','orientation')))),X),X)",bonan's rule,1
5,16,BtpIWWhmd0,r7iNHo-YDufvj4ttAAAF,Kappa,at least one is blue AND small,"Red does not need to be present
Varying sizes are acceptable",[['x1']],"Z.forall(lambda x1: Z.not_operator(Z.equal(x1,'red','colour')),X)",bonan's rule,"As few as three are allowed
There should be a green","[['x1'],['x1','x2']]","Z.exists(lambda x1: Z.atmost(lambda x2: Z.equal(x1,'green','colour'),3,X),X)",bonan's rule,1
6,17,BtpIWWhmd0,r7iNHo-YDufvj4ttAAAF,Zeta,there is a red,"There must be at least one red
There can be exactly one red in total.",[['x1']],"Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)",bonan's rule,There must be at least one red,[['x1']],"Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)",bonan's rule,0
7,18,BtpIWWhmd0,r7iNHo-YDufvj4ttAAAF,Upsilon,none are upright,"Red should be on its side
There can be as few as 2 red",[['x1']],"Z.forall(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.not_operator(Z.equal(x1,'upright','orientation'))),X)",bonan's rule,Red must be on a side and not standing straight,[['x1']],"Z.forall(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.not_operator(Z.equal(x1,'upright','orientation'))),X)",bonan's rule,0
8,19,BtpIWWhmd0,r7iNHo-YDufvj4ttAAAF,Omega,all are blue OR small,"There does not have to be a red
You can have all blue",[['x1']],"Z.forall(lambda x1: Z.not_operator(Z.equal(x1,'red','colour')),X)",bonan's rule,There can be only blue,[['x1']],"Z.forall(lambda x1: Z.equal(x1,'blue','colour'),X)",bonan's rule,0
9,20,U1zleaHAX3,E1SpkGS9NTgV8u12AAAR,Omega,all are blue OR small,There is at least two smaller cones.,[['x1']],"Z.atleast(lambda x1: Z.equal(x1,1,'size'),2,X)",bonan's rule,There is at least two smaller cones.,[['x1']],"Z.atleast(lambda x1: Z.equal(x1,1,'size'),2,X)",bonan's rule,0
10,21,U1zleaHAX3,E1SpkGS9NTgV8u12AAAR,Upsilon,none are upright,There must be at most three slanting cones.,[['x1']],"Z.atmost(lambda x1: Z.not_operator(Z.equal(x1,'upright','orientation')),3,X)",bonan's rule,There must at least three slanting cones.,[['x1']],"Z.atleast(lambda x1: Z.not_operator(Z.equal(x1,'upright','orientation')),3,X)",bonan's rule,0
11,22,U1zleaHAX3,E1SpkGS9NTgV8u12AAAR,Kappa,at least one is blue AND small,There is at least a mixture of big and small cones.,"[['x1'],['x1','x2']]","Z.exists(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,1,'size'),Z.equal(x2,3,'size')),X),X)",bonan's rule,There is at least one big and small cone.,"[['x1'],['x1','x2']]","Z.atleast(lambda x1: Z.atleast(lambda x2: Z.and_operator(Z.equal(x1,1,'size'),Z.equal(x2,3,'size')),1,X),1,X)",bonan's rule,1
12,23,U1zleaHAX3,E1SpkGS9NTgV8u12AAAR,Iota,one is blue,"There is at least a mixture of red, blue and green cones.","[['x1'],['x1','x2'],['x1','x2','x3']]","Z.exists(lambda x1: Z.exists(lambda x2: Z.exists(lambda x3: Z.and_operator(Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x2,'blue','colour')),Z.equal(x3,'green','colour')),X),X),X)",bonan's rule,"There is at least a mixture of red, blue and green cones.","[['x1'],['x1','x2'],['x1','x2','x3']]","Z.exists(lambda x1: Z.exists(lambda x2: Z.exists(lambda x3: Z.and_operator(Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x2,'blue','colour')),Z.equal(x3,'green','colour')),X),X),X)",bonan's rule,0
13,24,U1zleaHAX3,E1SpkGS9NTgV8u12AAAR,Zeta,there is a red,There is at least a mixture of both red and green cones.,"[['x1'],['x1','x2']]","Z.exists(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x2,'green','colour')),X),X)",bonan's rule,There is at least a mixture of both red and green cones.,"[['x1'],['x1','x2']]","Z.exists(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x2,'green','colour')),X),X)",bonan's rule,0
14,25,U1zleaHAX3,ijO29Ey-fm1vE_ApAAAQ,Omega,all are blue OR small,"There must be at least one blue cone, and it must be the largest object present; there must also be no red cones present.","[['x1'],['x1','x2'],['x1','x2','x3']]","Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.and_operator(Z.and_operator(Z.equal(x1,'blue','colour'),Z.greater(x1,x2,'size')),Z.not_operator(Z.equal(x3,'red','colour'))),X),X),X)",bonan's rule,"There must be at least one blue cone present, and it must be the single largest cone present; there cannot be any red cones present. Orientation of the blue cone doesn't appear to matter.","[['x1'],['x1','x2'],['x1','x2','x3']]","Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.and_operator(Z.and_operator(Z.equal(x1,'blue','colour'),Z.greater(x1,x2,'size')),Z.not_operator(Z.equal(x3,'red','colour'))),X),X),X)",bonan's rule,0
15,26,U1zleaHAX3,ijO29Ey-fm1vE_ApAAAQ,Upsilon,none are upright,"There must not be any upright cones present; color and size don't appear to matter, so long as this orientation requirement is met.",[['x1']],"Z.forall(lambda x1: Z.not_operator(Z.equal(x1,'upright','orientation')),X)",bonan's rule,"There must not be a single cone present that is upright. So long as this orientation is met, color, size, and number of cones doesn't appear to matter.",[['x1']],"Z.forall(lambda x1: Z.not_operator(Z.equal(x1,'upright','orientation')),X)",bonan's rule,0
16,27,U1zleaHAX3,ijO29Ey-fm1vE_ApAAAQ,Kappa,at least one is blue AND small,"There must be at least two blue cones present. The presence of other colors/sizes/orientations doesn't appear to matter, but it MIGHT need to be one small blue cone with one medium blue cone.",[['x1']],"Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),2,X)",bonan's rule,"There must be at least two blue cones present, possibly needing to include at least one small-sized and one medium-sized. Other colors and sizes don't appear to matter. A possible variation is that at least two blue cones of the same orientation must be present.",[['x1']],"Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),2,X)",bonan's rule,1
17,28,U1zleaHAX3,ijO29Ey-fm1vE_ApAAAQ,Iota,one is blue,"There must be at least two cones present that are upright, one of which must be red.","[['x1'],['x1','x2']]","Z.atleast(lambda x1: Z.exists(lambda x2:Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)",bonan's rule,"There must be at least three cones present, with at least one of them being red. The majority of the cones possibly need to have a similar orientation to the red cone.","[['x1'],['x1','x2']]","Z.exists(lambda x1: Z.atleast(lambda x2: Z.equal(x1,'red','colour'),3,X),X)",bonan's rule,0
18,31,zOFxssGifq,xJIHTzH_6xnTxFlRAAAa,Zeta,there is a red,Any cone on its side.,[['x1']],"Z.exists(lambda x1: Z.not_operator(Z.equal(x1,'upright','orientation')),X)",bonan's rule,Any cone on its side. Any red cone on its own. ,[['x1']],"Z.exists(lambda x1: Z.or_operator(Z.not_operator(Z.equal(x1,'upright','orientation')), Z.equal(x1,'red','colour')),X)",bonan's rule,0
19,34,zOFxssGifq,xJIHTzH_6xnTxFlRAAAa,Upsilon,none are upright,Any cone on its side. Cannot have any cones standing upright. ,[['x1']],"Z.forall(lambda x1: Z.not_operator(Z.equal(x1,'upright','orientation')),X)",bonan's rule,Any cone on its side. Cannot have any cones standing upright. ,[['x1']],"Z.forall(lambda x1: Z.not_operator(Z.equal(x1,'upright','orientation')),X)",bonan's rule,0
20,35,zOFxssGifq,VpvPjmHNp4f3c7RjAAAZ,Kappa,at least one is blue AND small,There must be at least one small blue cone in any orientation or position.,[['x1']],"Z.atleast(lambda x1: Z.and_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,1,'size')),1,X)",bonan's rule,There must be at least one small blue cone in any orientation or position.,[['x1']],"Z.atleast(lambda x1: Z.and_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,1,'size')),1,X)",bonan's rule,1
21,36,zOFxssGifq,VpvPjmHNp4f3c7RjAAAZ,Zeta,there is a red,There must be at least one red cone of any size in any orientation or position.,[['x1']],"Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)",bonan's rule,There must be at least 1 red cone of any size in any position or orientation.,[['x1']],"Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)",bonan's rule,0
22,37,zOFxssGifq,VpvPjmHNp4f3c7RjAAAZ,Omega,all are blue OR small,There must be either a small green cone or a blue cone of any size.  These can be in any position or orientation.,[['x1']],"Z.exists(lambda x1: Z.or_operator(Z.and_operator(Z.equal(x1,'green','colour'),Z.equal(x1,1,'size')),Z.equal(x1,'blue','colour')),X)",bonan's rule,"There must be either a small green cone or a blue cone of any size in any orientation or position, but there can be no red cones.","[['x1'],['x1','x2']]","Z.exists(lambda x1: Z.forall(lambda x2: Z.and_operator(Z.or_operator(Z.and_operator(Z.equal(x1,'green','colour'),Z.equal(x1,1,'size')),Z.equal(x1,'blue','colour')),Z.not_operator(Z.equal(x2,'red','colour'))),X),X)",bonan's rule,0
23,38,zOFxssGifq,VpvPjmHNp4f3c7RjAAAZ,Iota,one is blue,There must be at least 1 blue cone of any size in any position or orientation.,[['x1']],"Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)",bonan's rule,There must be one and only one blue cone of any size in any orientation or position.,[['x1']],"Z.exactly(lambda x1: Z.equal(x1,'blue','colour'),1,X)",bonan's rule,0
24,39,zOFxssGifq,VpvPjmHNp4f3c7RjAAAZ,Upsilon,none are upright,There must be a red cone of any size on its side in any position,[['x1']],"Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.or_operator(Z.equal(x1,'lhs','orientation'),Z.equal(x1,'rhs','orientation'))),X)",bonan's rule,"There must be a red cone of any size on its side in any position, but there also can not be any upright red cones.","[['x1'],['x1','x2']]","Z.exists(lambda x1: Z.forall(lambda x2: Z.and_operator(Z.and_operator(Z.equal(x1,'red','colour'),Z.or_operator(Z.equal(x1,'lhs','orientation'),Z.equal(x1,'rhs','orientation'))),Z.not_operator(Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation')))),X),X)",bonan's rule,0
25,40,9FM5oWrm4Q,OmBy4yvY2pfWQmDgAAAK,Upsilon,none are upright,None of the cones can be sitting upright.,[['x1']],"Z.forall(lambda x1: Z.not_operator(Z.equal(x1,'upright','orientation')),X)",bonan's rule,None of the cones can be sitting upright.,[['x1']],"Z.forall(lambda x1: Z.not_operator(Z.equal(x1,'upright','orientation')),X)",bonan's rule,0
26,42,9FM5oWrm4Q,OmBy4yvY2pfWQmDgAAAK,Iota,one is blue,There has to be at least one of each color.,"[['x1'],['x1','x2'],['x1','x2','x3']]","Z.exists(lambda x1: Z.exists(lambda x2: Z.exists(lambda x3: Z.and_operator(Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x2,'blue','colour')),Z.equal(x3,'green','colour')),X),X),X)",bonan's rule,There has to be at least one of each color.,"[['x1'],['x1','x2'],['x1','x2','x3']]","Z.exists(lambda x1: Z.exists(lambda x2: Z.exists(lambda x3: Z.and_operator(Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x2,'blue','colour')),Z.equal(x3,'green','colour')),X),X),X)",bonan's rule,0
27,47,9FM5oWrm4Q,qqrRkUjR9e24cK98AAAJ,Iota,one is blue,large red cone with any other color smaller cone will emit.,"[['x1'],['x1','x2']]","Z.exists(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,3,'size')), Z.and_operator(Z.not_operator(Z.equal(x2,'red','colour')),Z.greater(x1,x2,'size'))),X),X)",bonan's rule,Large red cone with smaller cones of different colors arranged any which way.,"[['x1'],['x1','x2']]","Z.exists(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,3,'size')), Z.and_operator(Z.not_operator(Z.equal(x2,'red','colour')),Z.greater(x1,x2,'size'))),X),X)",bonan's rule,0
28,48,9FM5oWrm4Q,qqrRkUjR9e24cK98AAAJ,Kappa,at least one is blue AND small,Small blue cone with any other size and color cone,[['x1']],"Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,1,'size')),X)",bonan's rule,can not think of anymore,[['x1']],"Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,1,'size')),X)",bonan's rule,0
29,49,9FM5oWrm4Q,qqrRkUjR9e24cK98AAAJ,Zeta,there is a red,Any red and green cone sized cones will emit along with midsized blue cone with any color and size cones like red and green,"[['x1'],['x1','x2']]","Z.exists(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.or_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'green','colour')),Z.and_operator(Z.equal(x2,'blue','colour'),Z.equal(x2,2,'size'))),X),X)",bonan's rule,can't think of anymore,"[['x1'],['x1','x2']]","Z.exists(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.or_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'green','colour')),Z.and_operator(Z.equal(x2,'blue','colour'),Z.equal(x2,2,'size'))),X),X)",bonan's rule,1
30,50,n816L8nJZL,S1Rl8ZLjGuV9clZWAAAM,Upsilon,none are upright,There needs to be at least two large red cones.,[['x1']],"Z.atleast(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,3,'size')),2,X)",bonan's rule,There must be at least two large red cones.,[['x1']],"Z.atleast(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,3,'size')),2,X)",bonan's rule,0
31,51,n816L8nJZL,S1Rl8ZLjGuV9clZWAAAM,Kappa,at least one is blue AND small,There must be two blue cones.,[['x1']],"Z.exactly(lambda x1: Z.equal(x1,'blue','colour'),2,X)",bonan's rule,There must be at least two blue cones.,[['x1']],"Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),2,X)",bonan's rule,0
32,52,n816L8nJZL,S1Rl8ZLjGuV9clZWAAAM,Zeta,there is a red,There must be one red cone.,[['x1']],"Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)",bonan's rule,There must be one medium red cone,[['x1']],"Z.exists(lambda x1: Z.and_operator(Z.equal(x1,2,'size'),Z.equal(x1,'red','colour')),X)",bonan's rule,0
33,56,n816L8nJZL,rn_VRK5iLPgev9f8AAAN,Kappa,at least one is blue AND small,I think the rule that applies is that there has to be 2 blue cones along with at least one green.,"[['x1'],['x1','x2']]","Z.exactly(lambda x1: Z.atleast(lambda x2: Z.and_operator(Z.equal(x1,'blue','colour'),Z.equal(x2,'green','colour')),1,X),2,X)",bonan's rule,There has got to be at least one red cone in addition to one large green cone.,"[['x1'],['x1','x2']]","Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'red','colour'),Z.and_operator(Z.equal(x2,3,'size'),Z.equal(x2,'green','colour'))),X),1,X)",bonan's rule,0
34,57,n816L8nJZL,rn_VRK5iLPgev9f8AAAN,Zeta,there is a red,"There has got to be at least one red cone, also one small cone of another color.","[['x1'],['x1','x2']]","Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'red','colour'),Z.and_operator(Z.not_operator(Z.equal(x2,'red','colour')),Z.equal(x2,1,'size'))),X),1,X)",bonan's rule,"There has got to be at least one red BIG cone, also one small cone of another color.","[['x1'],['x1','x2']]","Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.and_operator(Z.equal(x1,3,'size'),Z.equal(x1,'red','colour')),Z.and_operator(Z.not_operator(Z.equal(x2,'red','colour')),Z.equal(x2,1,'size'))),X),1,X)",bonan's rule,0
35,58,n816L8nJZL,rn_VRK5iLPgev9f8AAAN,Omega,all are blue OR small,"There has got to be at least one big blue cone, also one small cone of another color.","[['x1'],['x1','x2']]","Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.and_operator(Z.equal(x1,3,'size'),Z.equal(x1,'blue','colour')),Z.and_operator(Z.not_operator(Z.equal(x2,'red','colour')),Z.equal(x2,1,'size'))),X),1,X)",bonan's rule,"There has got to be at least one big blue cone, and one small cone of the same or a different color, they also must be standing.","[['x1'],['x1','x2']]","Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.and_operator(Z.and_operator(Z.equal(x1,3,'size'),Z.equal(x1,'blue','colour')),Z.equal(x1,'upright','orientation')),Z.and_operator(Z.equal(x2,'upright','orientation'),Z.equal(x2,1,'size'))),X),1,X)",bonan's rule,0
36,59,n816L8nJZL,rn_VRK5iLPgev9f8AAAN,Iota,one is blue,"There has got to be at least one red cone, also one small blue cone.","[['x1'],['x1','x2']]","Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'red','colour'),Z.and_operator(Z.equal(x2,'blue','colour'),Z.equal(x2,1,'size'))),X),1,X)",bonan's rule,"There has got to be at least one red cone, also one small blue cone. Also the red cone must be large and other cones must be smaller.","[['x1'],['x1','x2'],['x1','x2','x3']]","Z.atleast(lambda x1: Z.exists(lambda x2: Z.forall(lambda x3: Z.and_operator(Z.and_operator(Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,3,'size')),Z.and_operator(Z.equal(x2,'blue','colour'),Z.equal(x2,1,'size'))),Z.not_operator(Z.and_operator(Z.equal(x3,'red','colour'),Z.equal(x3,3,'size')))),X),X),1,X)",bonan's rule,0
37,60,mi47ypacNU,kHHm-H0mTQUFgweSAAAP,Omega,all are blue OR small,There must be at least one blue cone and there must not be a green cone of medium or larger,"[['x1'],['x1','x2']]","Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'blue','colour'),Z.and_operator(Z.not_operator(Z.equal(x2,'green','colour')),Z.grequal(x2,2,'size'))),X),1,X)",bonan's rule,There must be at least one blue cone and no green cone can be larger than small.,"[['x1'],['x1','x2']]","Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'blue','colour'),Z.and_operator(Z.not_operator(Z.equal(x2,'green','colour')),Z.grequal(x2,2,'size'))),X),1,X)",bonan's rule,0
38,61,mi47ypacNU,kHHm-H0mTQUFgweSAAAP,Zeta,there is a red,There must be at least one red cone,[['x1']],"Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)",bonan's rule,There must be at least one red cone,[['x1']],"Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)",bonan's rule,1
39,62,mi47ypacNU,kHHm-H0mTQUFgweSAAAP,Iota,one is blue,At least two cones of different colors must be touching,"[['x1'],['x1','x2']]","Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.not_operator(Z.equal(x1,x2,'colour')),Z.hor_operator(x1,x2,'contact')),X),1,X)",bonan's rule,There must be a green cone.,[['x1']],"Z.exists(lambda x1: Z.equal(x1,'green','colour'),X)",bonan's rule,1
40,64,mi47ypacNU,kHHm-H0mTQUFgweSAAAP,Upsilon,none are upright,No cone must be mostly upright,[['x1']],"Z.forall(lambda x1: Z.not_operator(Z.equal(x1,'upright','orientation')),X)",bonan's rule,No cones can be facing upwards,[['x1']],"Z.forall(lambda x1: Z.not_operator(Z.equal(x1,'upright','orientation')),X)",bonan's rule,0
41,66,mi47ypacNU,6gZy2DmjWY9DADshAAAO,Zeta,there is a red,There must be at least one red cone.,[['x1']],"Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)",bonan's rule,There must be at least one red cone.,[['x1']],"Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)",bonan's rule,1
42,71,spw4MmLRO4,JT7ZAB7dPEXbWM9KAAAF,Kappa,at least one is blue AND small,I am not sure on this one.  The only consistency I had was the medium green and blue together.,"[['x1'],['x1','x2']]","Z.exists(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.and_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,2,'size')),Z.and_operator(Z.equal(x1,'green','colour'),Z.equal(x2,2,'size'))),X),X)",bonan's rule,I went with the green and blue touching each other being the cause of radiation.,"[['x1'],['x1','x2']]","Z.exists(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.and_operator(Z.equal(x1,'blue','colour'),Z.equal(x2,'green','colour')),Z.hor_operator(x1,x2,'contact')),X),X)",bonan's rule,0
43,72,spw4MmLRO4,JT7ZAB7dPEXbWM9KAAAF,Upsilon,none are upright,"Red making contact makes radiation, but any other colors present will negate it.","[['x1'],['x1','x2'],['x1','x2','x3']]","Z.exists(lambda x1: Z.exists(lambda x2: Z.forall(lambda x3: Z.and_operator(Z.and_operator(Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x2,'red','colour')),Z.hor_operator(x1,x2,'contact')),Z.not_operator(Z.or_operator(Z.equal(x3,'blue','colour'),Z.equal(x3,'green','colour')))),X),X),X)",bonan's rule,"Red touching each other will emit, but if any other colors are present it will not.","[['x1'],['x1','x2'],['x1','x2','x3']]","Z.exists(lambda x1: Z.exists(lambda x2: Z.forall(lambda x3: Z.and_operator(Z.and_operator(Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x2,'red','colour')),Z.hor_operator(x1,x2,'contact')),Z.not_operator(Z.or_operator(Z.equal(x3,'blue','colour'),Z.equal(x3,'green','colour')))),X),X),X)",bonan's rule,0
44,73,spw4MmLRO4,JT7ZAB7dPEXbWM9KAAAF,Omega,all are blue OR small,Blue by itself emits radiation,[['x1']],"Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)",bonan's rule,"Blue alone emits radation, no other color can be present",[['x1']],"Z.forall(lambda x1: Z.equal(x1,'blue','colour'),X)",bonan's rule,0
45,74,spw4MmLRO4,JT7ZAB7dPEXbWM9KAAAF,Zeta,there is a red,If red is present it will emit radiation,[['x1']],"Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)",bonan's rule,Red is present = radiation,[['x1']],"Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)",bonan's rule,0
46,75,spw4MmLRO4,qTHpztkVBSdBm_UZAAAE,Iota,one is blue,There must be one cone of each color.,"[['x1'],['x1','x2'],['x1','x2','x3']]","Z.exists(lambda x1: Z.exists(lambda x2: Z.exists(lambda x3: Z.and_operator(Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x2,'blue','colour')),Z.equal(x3,'green','colour')),X),X),X)",bonan's rule,There must be one of each color.,"[['x1'],['x1','x2'],['x1','x2','x3']]","Z.exists(lambda x1: Z.exists(lambda x2: Z.exists(lambda x3: Z.and_operator(Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x2,'blue','colour')),Z.equal(x3,'green','colour')),X),X),X)",bonan's rule,0
47,76,spw4MmLRO4,qTHpztkVBSdBm_UZAAAE,Kappa,at least one is blue AND small,There must be at least one small blue cone.,[['x1']],"Z.atleast(lambda x1: Z.and_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,1,'size')),1,X)",bonan's rule,There must be at least one small blue cone.,[['x1']],"Z.atleast(lambda x1: Z.and_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,1,'size')),1,X)",bonan's rule,0
48,77,spw4MmLRO4,qTHpztkVBSdBm_UZAAAE,Upsilon,none are upright,There must be a big red cone.,[['x1']],"Z.atleast(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,3,'size')),1,X)",bonan's rule,There must be big red cone.,[['x1']],"Z.atleast(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,3,'size')),1,X)",bonan's rule,0
49,78,spw4MmLRO4,qTHpztkVBSdBm_UZAAAE,Omega,all are blue OR small,There must be one big blue cone.,[['x1']],"Z.atleast(lambda x1: Z.and_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,3,'size')),1,X)",bonan's rule,There must be one big blue cone.,[['x1']],"Z.atleast(lambda x1: Z.and_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,3,'size')),1,X)",bonan's rule,1
50,79,spw4MmLRO4,qTHpztkVBSdBm_UZAAAE,Zeta,there is a red,There must be a big red cone.,[['x1']],"Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,3,'size')),X)",bonan's rule,There must be red cone.,[['x1']],"Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)",bonan's rule,0
51,80,fMxwrGzBgz,J2g8DxowwOB-gkR8AAAM,Kappa,at least one is blue AND small,There must be more than one blue cone in the arrangement.,[['x1']],"Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),2,X)",bonan's rule,There must be at least two blue cones in the arrangement.,[['x1']],"Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),2,X)",bonan's rule,1
52,84,fMxwrGzBgz,J2g8DxowwOB-gkR8AAAM,Upsilon,none are upright,No cones can be upright in this arrangement.,[['x1']],"Z.forall(lambda x1: Z.not_operator(Z.equal(x1,'upright','orientation')),X)",bonan's rule,No cones can be upright in this arrangement.,[['x1']],"Z.forall(lambda x1: Z.not_operator(Z.equal(x1,'upright','orientation')),X)",bonan's rule,0
53,86,fMxwrGzBgz,d9VaYpby-V6K-PGgAAAN,Iota,one is blue,"The size of the cones don't matter as long as all the colors, blue, green and red are present. But the green cone can't be on top of the blue cone to emit radiation.","[['x1'],['x1','x2'],['x1','x2','x3']]","Z.exists(lambda x1: Z.exists(lambda x2: Z.exists(lambda x3: Z.and_operator(Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x2,'blue','colour')),Z.equal(x3,'green','colour')),X),X),X)",bonan's rule,All colors must be present. The size of the cones doesn't make a difference. The positioning only makes a difference in the placement of the green cone.,"[['x1'],['x1','x2'],['x1','x2','x3']]","Z.exists(lambda x1: Z.exists(lambda x2: Z.exists(lambda x3: Z.and_operator(Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x2,'blue','colour')),Z.equal(x3,'green','colour')),X),X),X)",bonan's rule,0
54,87,fMxwrGzBgz,d9VaYpby-V6K-PGgAAAN,Zeta,there is a red,All color combinations work except for blue and green.  You always have to have a red cone present to emit radiation. It doesn't matter the size or position.,[['x1']],"Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)",bonan's rule,I can't think of any other rules than what I wrote previously. ,[['x1']],"Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)",bonan's rule,0
55,89,fMxwrGzBgz,d9VaYpby-V6K-PGgAAAN,Upsilon,none are upright,I think the rule is that only red and blue cones can be present to emit radiation. The blue cone has to be small.,"[['x1'],['x1','x2'],['x1','x2','x3']]","Z.exists(lambda x1: Z.exists(lambda x2: Z.forall(lambda x3: Z.and_operator(Z.and_operator(Z.and_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,1,'size')),Z.equal(x2,'green','colour')),Z.not_operator(Z.equal(x3,'red','colour'))),X),X),X)",bonan's rule,I can't think of any more to the rule than I previously wrote. The color combination must be blue and green.,"[['x1'],['x1','x2'],['x1','x2','x3']]","Z.exists(lambda x1: Z.exists(lambda x2: Z.forall(lambda x3: Z.and_operator(Z.and_operator(Z.and_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,1,'size')),Z.equal(x2,'green','colour')),Z.not_operator(Z.equal(x3,'red','colour'))),X),X),X)",bonan's rule,0
56,90,Ps0SdvfhCU,UoeEYonMQNivhGsyAAAG,Upsilon,none are upright,Any cone that is on its side. Can have multiple or stacked cones as long as they are all on the side. ,[['x1']],"Z.forall(lambda x1: Z.not_operator(Z.equal(x1,'upright','orientation')),X)",bonan's rule,Any cone or cones on their side. There cannot be any cones standing up. ,[['x1']],"Z.forall(lambda x1: Z.not_operator(Z.equal(x1,'upright','orientation')),X)",bonan's rule,1
57,91,Ps0SdvfhCU,UoeEYonMQNivhGsyAAAG,Iota,one is blue,There must be at least one cone upright and one cone on its side.,"[['x1'],['x1','x2']]","Z.atleast(lambda x1: Z.atleast(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.or_operator(Z.equal(x2,'lhs','orientation'),Z.equal(x2,'rhs','orientation'))),1,X),1,X)",bonan's rule,There must be at least one cone upright and one cone on it's side.,"[['x1'],['x1','x2']]","Z.atleast(lambda x1: Z.atleast(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.or_operator(Z.equal(x2,'lhs','orientation'),Z.equal(x2,'rhs','orientation'))),1,X),1,X)",bonan's rule,1
58,92,Ps0SdvfhCU,UoeEYonMQNivhGsyAAAG,Kappa,at least one is blue AND small,There must be at least one blue cone present.,[['x1']],"Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)",bonan's rule,Any blue cone except the largest one must be present.,[['x1']],"Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'blue','colour'),Z.not_operator(Z.equal(x1,3,'size'))),X)",bonan's rule,0
59,94,Ps0SdvfhCU,UoeEYonMQNivhGsyAAAG,Zeta,there is a red,There must be at least one red cone present.,[['x1']],"Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)",bonan's rule,There must be at least one red cone present. ,[['x1']],"Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)",bonan's rule,0
60,95,Ps0SdvfhCU,bvS2n6FpsWwYieCFAAAF,Upsilon,none are upright,At least 2 cones are not upright,[['x1']],"Z.atleast(lambda x1: Z.not_operator(Z.equal(x1,'upright','orientation')),2,X)",bonan's rule,There is at least one sideways cone not touching another color,"[['x1'],['x1','x2']]","Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.not_operator(Z.equal(x1,'upright','orientation')),Z.not_operator(Z.hor_operator(x1,x2,'contact'))),X),1,X)",bonan's rule,1
61,97,Ps0SdvfhCU,bvS2n6FpsWwYieCFAAAF,Kappa,at least one is blue AND small,there is at least one small cone that is upright,[['x1']],"Z.atleast(lambda x1: Z.and_operator(Z.equal(x1,1,'size'),Z.equal(x1,'upright','orientation')),1,X)",bonan's rule,there is at least one small blue cone,[['x1']],"Z.atleast(lambda x1: Z.and_operator(Z.equal(x1,1,'size'),Z.equal(x1,'blue','colour')),1,X)",bonan's rule,0
62,98,Ps0SdvfhCU,bvS2n6FpsWwYieCFAAAF,Omega,all are blue OR small,There is exactly one blue cone larger than all of the other cones,"[['x1'],['x1','x2']]","Z.exactly(lambda x1: Z.forall(lambda x2: Z.and_operator(Z.equal(x1,'blue','colour'),Z.greater(x1,x2,'size')),X),1,X)",bonan's rule,There is exactly one upright blue cone,[['x1']],"Z.exactly(lambda x1: Z.and_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'upright','orientation')),1,X)",bonan's rule,0
63,99,Ps0SdvfhCU,bvS2n6FpsWwYieCFAAAF,Zeta,there is a red,There is at least one red cone,[['x1']],"Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)",bonan's rule,There is at least one red cone,[['x1']],"Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)",bonan's rule,0
64,107,PKL94C0J8G,2PSNytKkwqU4wHbjAAAN,Iota,one is blue,There must be atleast one cone will be incline with another,"[['x1'],['x1','x2']]","Z.atleast(lambda x1: Z.atleast(lambda x2: Z.hor_operator(x1,x2,'contact'),1,X),1,X)",bonan's rule,There is exactly one is incline with another,"[['x1'],['x1','x2']]","Z.exactly(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)",bonan's rule,1
65,108,PKL94C0J8G,2PSNytKkwqU4wHbjAAAN,Omega,all are blue OR small,There must be one Large blue cone is needed,[['x1']],"Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,3,'size')),X)",bonan's rule,There must be atleast needed one blue cone,[['x1']],"Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)",bonan's rule,0
66,115,OFO4BbvtZU,Ea3CVUwVovU8FL6dAAAV,Zeta,there is a red,There must be at least one red triangle on the scene to emit radiation. ,[['x1']],"Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)",bonan's rule,There must be at least one red triangle on the scene in order to emit radiation. ,[['x1']],"Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)",bonan's rule,1
67,116,OFO4BbvtZU,Ea3CVUwVovU8FL6dAAAV,Omega,all are blue OR small,There needs to be at least one small green triangle in order to emit radiation. ,[['x1']],"Z.atleast(lambda x1: Z.and_operator(Z.equal(x1,'green','colour'),Z.equal(x1,1,'size')),1,X)",bonan's rule,There needs to be at least one small green triangle in order to emit radiation. ,[['x1']],"Z.atleast(lambda x1: Z.and_operator(Z.equal(x1,'green','colour'),Z.equal(x1,1,'size')),1,X)",bonan's rule,0
68,117,OFO4BbvtZU,Ea3CVUwVovU8FL6dAAAV,Iota,one is blue,There must be at least one green or blue triangle on the stage in an upright position. ,[['x1']],"Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)",bonan's rule,There needs to be at least one green or red triangle in an upright position. ,[['x1']],"Z.atleast(lambda x1: Z.and_operator(Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'red','colour')),Z.equal(x1,'upright','orientation')),1,X)",bonan's rule,0
69,118,OFO4BbvtZU,Ea3CVUwVovU8FL6dAAAV,Kappa,at least one is blue AND small,There must be at least two blue triangles of two different shapes on the scene. ,"[['x1'],['x1','x2']]","Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'blue','colour'),Z.not_operator(Z.equal(x1,x2,'size'))),X),2,X)",bonan's rule,There must be at least two blue triangles of two different sizes. ,"[['x1'],['x1','x2']]","Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'blue','colour'),Z.not_operator(Z.equal(x1,x2,'size'))),X),2,X)",bonan's rule,0
70,119,OFO4BbvtZU,Ea3CVUwVovU8FL6dAAAV,Upsilon,none are upright,There needs to be at least two red triangles that their planes are facing different directions.,"[['x1'],['x1','x2']]","Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'red','colour'),Z.not_operator(Z.equal(x1,x2,'orientation'))),X),2,X)",bonan's rule,There needs to be at least two red triangles facing in the same direction on the scene.,"[['x1'],['x1','x2']]","Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,x2,'orientation')),X),2,X)",bonan's rule,0
71,121,HsWUa1IiOe,mbxlKAX3Apq5f1McAAAD,Upsilon,none are upright,it seems to be a combination of red and purple cones either configured same colors together or combined with each other.,"[['x1'],['x1','x2']]","Z.exists(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x2,'blue','colour')),X),X)",bonan's rule,colors of red and purple combinations without regard to size with cones touching,"[['x1'],['x1','x2']]","Z.exists(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x2,'blue','colour')),X),X)",bonan's rule,0
72,123,HsWUa1IiOe,mbxlKAX3Apq5f1McAAAD,Zeta,there is a red,it is obvious that the red and green in almost any combination works but a red cone and a green cone must be touching in one of the combinations,"[['x1'],['x1','x2']]","Z.exists(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x2,'green','colour')),Z.hor_operator(x1,x2,'contact')),X),X)",bonan's rule,at least one red and green cone must be touching.  size of the cone does not matter.,"[['x1'],['x1','x2']]","Z.exists(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x2,'green','colour')),Z.hor_operator(x1,x2,'contact')),X),X)",bonan's rule,0
73,125,HsWUa1IiOe,plYxmbQkBrz0OYG7AAAC,Kappa,at least one is blue AND small,There must be at least two big and two small cones in order to emit radiation. The orientation does not matter. ,"[['x1'],['x1','x2']]","Z.atleast(lambda x1: Z.atleast(lambda x2: Z.and_operator(Z.equal(x1,1,'size'),Z.equal(x2,3,'size')),2,X),2,X)",bonan's rule,There must be at least two big and two small cones in order to emit radiation. Orientation does not matter. ,"[['x1'],['x1','x2']]","Z.atleast(lambda x1: Z.atleast(lambda x2: Z.and_operator(Z.equal(x1,1,'size'),Z.equal(x2,3,'size')),2,X),2,X)",bonan's rule,0
74,126,HsWUa1IiOe,plYxmbQkBrz0OYG7AAAC,Upsilon,none are upright,At least two cones need to be lying sideways and touching each other. The size and arrangement does not matter. ,"[['x1'],['x1','x2']]","Z.exists(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.and_operator(Z.not_operator(Z.equal(x1,'upright','orientation')),Z.not_operator(Z.equal(x2,'upright','orientation'))),Z.hor_operator(x1,x2,'contact')),X),X)",bonan's rule,At least two cones need to be lying sideways and touching each other and there cannot be any vertical cones. The size does not matter. ,"[['x1'],['x1','x2'],['x1','x2','x3']]","Z.exists(lambda x1: Z.exists(lambda x2: Z.forall(lambda x3: Z.and_operator(Z.and_operator(Z.and_operator(Z.not_operator(Z.equal(x1,'upright','orientation')),Z.not_operator(Z.equal(x2,'upright','orientation'))),Z.hor_operator(x1,x2,'contact')),Z.not_operator(Z.equal(x3,'upright','orientation'))),X),X),X)",bonan's rule,0
75,127,HsWUa1IiOe,plYxmbQkBrz0OYG7AAAC,Omega,all are blue OR small,There needs to be at least one blue cone and two small cones to emit radiation. ,"[['x1'],['x1','x2']]","Z.atleast(lambda x1: Z.atleast(lambda x2: Z.and_operator(Z.equal(x1,'blue','colour'),Z.equal(x2,2,'size')),1,X),2,X)",bonan's rule,There needs to be at least one blue cone and two other cones to emit radiation. ,"[['x1'],['x1','x2']]","Z.atleast(lambda x1: Z.atleast(lambda x2: Z.and_operator(Z.equal(x1,'blue','colour'),Z.equal(x2,2,'size')),1,X),2,X)",bonan's rule,0
76,128,HsWUa1IiOe,plYxmbQkBrz0OYG7AAAC,Zeta,there is a red,There must be a red cone to emit radiation. ,[['x1']],"Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)",bonan's rule,There needs to be at least one red cone to emit radiation. ,[['x1']],"Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)",bonan's rule,0
77,129,HsWUa1IiOe,plYxmbQkBrz0OYG7AAAC,Iota,one is blue,There must be at least one green cone and a minimum of three cones to emit radiation. ,[['x1']],"Z.atleast(lambda x1: Z.equal(x1,'green','colour'),3,X)",bonan's rule,There must be at least one green cone and a minimum of three cones to emit radiation. ,[['x1']],"Z.atleast(lambda x1: Z.equal(x1,'green','colour'),3,X)",bonan's rule,0
78,130,Mx3jNAmq0L,KXmzl5-eGL_6YNxDAAAH,Iota,one is blue,A blue cone must be present.,[['x1']],"Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)",bonan's rule,There must be a blue cone present.,[['x1']],"Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)",bonan's rule,0
79,131,Mx3jNAmq0L,KXmzl5-eGL_6YNxDAAAH,Omega,all are blue OR small,A small green cone must be present.,[['x1']],"Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'green','colour'),Z.equal(x1,1,'size')),X)",bonan's rule,A small green cone must be present.,[['x1']],"Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'green','colour'),Z.equal(x1,1,'size')),X)",bonan's rule,0
80,132,Mx3jNAmq0L,KXmzl5-eGL_6YNxDAAAH,Kappa,at least one is blue AND small,At least one small blue triangle must be present.,[['x1']],"Z.atleast(lambda x1: Z.and_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,1,'size')),1,X)",bonan's rule,There must be at least two objects and one of them needs to be a blue triangle.,"[['x1'],['x1','x2']]","Z.exists(lambda x1: Z.atleast(lambda x2: Z.equal(x1,'blue','colour'),2,X),X)",bonan's rule,0
81,133,Mx3jNAmq0L,KXmzl5-eGL_6YNxDAAAH,Zeta,there is a red,There must be at least one red triangle present.,[['x1']],"Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)",bonan's rule,At least one red cone must be present.,[['x1']],"Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)",bonan's rule,1
82,134,Mx3jNAmq0L,KXmzl5-eGL_6YNxDAAAH,Upsilon,none are upright,None of the cones can point upward. ,[['x1']],"Z.forall(lambda x1: Z.not_operator(Z.equal(x1,'upright','orientation')),X)",bonan's rule,There cannot be any cones facing upward.,[['x1']],"Z.forall(lambda x1: Z.not_operator(Z.equal(x1,'upright','orientation')),X)",bonan's rule,0
83,136,Mx3jNAmq0L,t87OKoupac3tspxNAAAG,Omega,all are blue OR small,The largest triangle present is a medium blue triangle.,"[['x1'],['x1','x2']]","Z.exists(lambda x1: Z.forall(lambda x2: Z.and_operator(Z.and_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,2,'size')),Z.equal(x2,1,'size')),X),X)",bonan's rule,The largest triangle is a medium blue triangle.,"[['x1'],['x1','x2']]","Z.exists(lambda x1: Z.forall(lambda x2: Z.and_operator(Z.and_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,2,'size')),Z.equal(x2,1,'size')),X),X)",bonan's rule,0
84,137,Mx3jNAmq0L,t87OKoupac3tspxNAAAG,Kappa,at least one is blue AND small,A blue triangle must be present,[['x1']],"Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)",bonan's rule,There must be at least 1 blue triangle.,[['x1']],"Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)",bonan's rule,0
85,139,Mx3jNAmq0L,t87OKoupac3tspxNAAAG,Upsilon,none are upright,None of the triangles can be upright,[['x1']],"Z.forall(lambda x1: Z.not_operator(Z.equal(x1,'upright','orientation')),X)",bonan's rule,None of the triangles can be upright.,[['x1']],"Z.forall(lambda x1: Z.not_operator(Z.equal(x1,'upright','orientation')),X)",bonan's rule,0
86,141,VE7jVmxDRi,VGhYt_ONT__ElPblAAAK,Iota,one is blue,There must be atleast one blue.,[['x1']],"Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)",bonan's rule,There must be atleast one blue.,[['x1']],"Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)",bonan's rule,0
87,144,VE7jVmxDRi,VGhYt_ONT__ElPblAAAK,Zeta,there is a red,There must be atleast one red.,[['x1']],"Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)",bonan's rule,There must be atleast on red or one blue,[['x1']],"Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'blue','colour')),1,X)",bonan's rule,0
88,145,VE7jVmxDRi,gWdvOGkG70-6oIcKAAAJ,Omega,all are blue OR small,"As long as there is either a green or blue cone in any size, without a red cone present, radiation is emitted. Cones that touch do not seem to effect the way the radiation is emitted. ","[['x1'],['x1','x2']]","Z.exists(lambda x1: Z.forall(lambda x2: Z.and_operator(Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),Z.not_operator(Z.equal(x2,'red','colour'))),X),X)",bonan's rule,"As long as there is either a small sized green or blue  cone of any size, without a red cone present, radiation is emitted. Cones that touch do not seem to effect the way the radiation is emitted. ","[['x1'],['x1','x2']]","Z.exists(lambda x1: Z.forall(lambda x2: Z.and_operator(Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),Z.not_operator(Z.equal(x2,'red','colour'))),X),X)",bonan's rule,0
89,146,VE7jVmxDRi,gWdvOGkG70-6oIcKAAAJ,Iota,one is blue,"I believe that the presence of any sized blue cone, in any position, will lead to the release of Iota radiation. An individual small green cone and an individual  medium sized red cone were confirmed not to emit any Iota radiation by themselves.",[['x1']],"Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)",bonan's rule,"I believe that the presence of any sized blue cone, in any position, will lead to the release of Iota radiation. An individual small green cone and an individual medium sized red cone were confirmed not to emit any Iota radiation by themselves.",[['x1']],"Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)",bonan's rule,0
90,147,VE7jVmxDRi,gWdvOGkG70-6oIcKAAAJ,Kappa,at least one is blue AND small,"If there is at least one small blue cone present in a scene, kappa radiation is emitted.",[['x1']],"Z.atleast(lambda x1: Z.and_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,1,'size')),1,X)",bonan's rule,"If there is at least one small blue cone present in a scene, regardless of its orientation, kappa radiation is emitted.",[['x1']],"Z.atleast(lambda x1: Z.and_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,1,'size')),1,X)",bonan's rule,0
91,155,ERkThrbRcj,IdLU8lt87w--tMi-AAAN,Iota,one is blue,"If a blue cone exists, Iota waves are emitted. ",[['x1']],"Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)",bonan's rule,"If there is a blue cone, Iota waves will be emitted. ",[['x1']],"Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)",bonan's rule,0
92,156,ERkThrbRcj,IdLU8lt87w--tMi-AAAN,Zeta,there is a red,"If there is a red cone, (Zeta?) radiation is emitted. ",[['x1']],"Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)",bonan's rule,"If there is a red cone, Zeta radiation is emitted. ",[['x1']],"Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)",bonan's rule,0
93,157,ERkThrbRcj,IdLU8lt87w--tMi-AAAN,Upsilon,none are upright,"If two red cones are falling over, Upsilon waves are emitted.",[['x1']],"Z.exactly(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.not_operator(Z.equal(x1,'upright','orientation'))),2,X)",bonan's rule,"If there are at least two leaning red cones, Upsilon waves are produced.",[['x1']],"Z.exactly(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.not_operator(Z.equal(x1,'upright','orientation'))),2,X)",bonan's rule,0
94,158,ERkThrbRcj,IdLU8lt87w--tMi-AAAN,Kappa,at least one is blue AND small,"If there is at least one small blue cone, Kappa waves will be radiated.",[['x1']],"Z.atleast(lambda x1: Z.and_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,1,'size')),1,X)",bonan's rule,"If there is at least one small blue cone, Kappa waves will be radiated.",[['x1']],"Z.atleast(lambda x1: Z.and_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,1,'size')),1,X)",bonan's rule,1
95,159,ERkThrbRcj,IdLU8lt87w--tMi-AAAN,Omega,all are blue OR small,There must be at least two of either small red cones or small green cones or a mixture. ,[['x1']],"Z.atleast(lambda x1: Z.or_operator(Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,1,'size')),Z.and_operator(Z.equal(x1,'green','colour'),Z.equal(x1,1,'size'))),2,X)",bonan's rule,There must be at least 2 of either small red cones or small green cones or a mixture.,[['x1']],"Z.atleast(lambda x1: Z.or_operator(Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,1,'size')),Z.and_operator(Z.equal(x1,'green','colour'),Z.equal(x1,1,'size'))),2,X)",bonan's rule,0
96,161,Jwm0HkYACp,Q7cj7QfSvrVQp4zyAAAP,Zeta,there is a red,There is a red cone laying to its side,[['x1']],"Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.or_operator(Z.equal(x1,'lhs','orientation'),Z.equal(x1,'rhs','orientation'))),X)",bonan's rule,There should be a red cone laying on it's side.,[['x1']],"Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.or_operator(Z.equal(x1,'lhs','orientation'),Z.equal(x1,'rhs','orientation'))),X)",bonan's rule,0
97,165,Jwm0HkYACp,rBqhQ3jC_fSvn8dPAAAQ,Upsilon,none are upright,There must be at least one small triangle facing left.,[['x1']],"Z.atleast(lambda x1: Z.and_operator(Z.equal(x1,1,'size'),Z.equal(x1,'lhs','orientation')),1,X)",bonan's rule,There must be one small triangle facing left and no triangles on top of eachother.,"[['x1'],['x1','x2']]","Z.atleast(lambda x1: Z.forall(lambda x2: Z.and_operator(Z.and_operator(Z.equal(x1,1,'size'),Z.equal(x1,'lhs','orientation')),Z.not_operator(Z.hor_operator(x1,x2,'contact'))),X),1,X)",bonan's rule,0
98,166,Jwm0HkYACp,rBqhQ3jC_fSvn8dPAAAQ,Zeta,there is a red,There must be at least one small red triangle facing left.,[['x1']],"Z.atleast(lambda x1: Z.and_operator(Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,1,'size')),Z.equal(x1,'lhs','orientation')),1,X)",bonan's rule,There must be at least one small red triangle facing left.,[['x1']],"Z.atleast(lambda x1: Z.and_operator(Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,1,'size')),Z.equal(x1,'lhs','orientation')),1,X)",bonan's rule,0
99,168,Jwm0HkYACp,rBqhQ3jC_fSvn8dPAAAQ,Iota,one is blue,Must contain at least one blue triangle of any size facing any direction.,[['x1']],"Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)",bonan's rule,"Since the other player had not choices, there are no changes from my first thought.",[['x1']],"Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)",bonan's rule,0
100,169,Jwm0HkYACp,rBqhQ3jC_fSvn8dPAAAQ,Kappa,at least one is blue AND small,There must be at least one small blue triangle facing any direction.,[['x1']],"Z.atleast(lambda x1: Z.and_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,1,'size')),1,X)",bonan's rule,Same answer as before. There must be at least one small blue triangle facing any direction.,[['x1']],"Z.atleast(lambda x1: Z.and_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,1,'size')),1,X)",bonan's rule,0
101,170,uYIREe2i4Q,doNd8T8QMhErhgp5AAAL,Iota,one is blue,Iota waves are cause by the presence of JUST a single purple cone of any size.,[['x1']],"Z.exactly(lambda x1: Z.equal(x1,'blue','colour'),1, X)",bonan's rule,The presences of only a single purple cone cause Iota waves irregardless of other colored cones presence or not.,[['x1']],"Z.exactly(lambda x1: Z.equal(x1,'blue','colour'),1, X)",bonan's rule,0
102,172,uYIREe2i4Q,doNd8T8QMhErhgp5AAAL,Omega,all are blue OR small,The presence of a small green cone creates the radiation.,[['x1']],"Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'green','colour'),Z.equal(x1,1,'size')),X)",bonan's rule,The presence of a small green cone with limited other cones creates the radiation.,[['x1']],"Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'green','colour'),Z.equal(x1,1,'size')),X)",bonan's rule,0
103,173,uYIREe2i4Q,doNd8T8QMhErhgp5AAAL,Upsilon,none are upright,Two large red cones and a small purple cone facing a different direction than them create the radiation.,"[['x1'],['x1','x2']]","Z.exactly(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,3,'size')),Z.and_operator(Z.and_operator(Z.equal(x2,'blue','colour'),Z.equal(x2,1,'size')),Z.not_operator(Z.equal(x1,x2,'orientation')))),X),2,X)",bonan's rule,Two large red cones and a small purple cone facing a different direction than them create the radiation.,"[['x1'],['x1','x2']]","Z.exactly(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,3,'size')),Z.and_operator(Z.and_operator(Z.equal(x2,'blue','colour'),Z.equal(x2,1,'size')),Z.not_operator(Z.equal(x1,x2,'orientation')))),X),2,X)",bonan's rule,0
104,174,uYIREe2i4Q,doNd8T8QMhErhgp5AAAL,Zeta,there is a red,I was under the impression that two cones on top of one another as long as one was red was the rule to get the radiation based on my experiments but after looking at the examples I believe it may just be that the requirement is one upright red cone.,[['x1']],"Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)",bonan's rule,I believe a red cone merely needs to be present for the radiation to occur.,[['x1']],"Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)",bonan's rule,0
105,175,uYIREe2i4Q,UQIJo156uDVLjDEFAAAK,Iota,one is blue,"There must be at least one shape of each color. It doesn't matter shape, size, or direction.","[['x1'],['x1','x2'],['x1','x2','x3']]","Z.exists(lambda x1: Z.exists(lambda x2: Z.exists(lambda x3: Z.and_operator(Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x2,'blue','colour')),Z.equal(x3,'green','colour')),X),X),X)",bonan's rule,There is exactly one blue shape in each photo.,[['x1']],"Z.exactly(lambda x1: Z.equal(x1,'blue','colour'),1,X)",bonan's rule,0
106,176,uYIREe2i4Q,UQIJo156uDVLjDEFAAAK,Kappa,at least one is blue AND small,There is exactly one small blue triangle.,[['x1']],"Z.exactly(lambda x1: Z.and_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,1,'size')),1,X)",bonan's rule,There is exactly one small blue triangle.,[['x1']],"Z.exactly(lambda x1: Z.and_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,1,'size')),1,X)",bonan's rule,0
107,177,uYIREe2i4Q,UQIJo156uDVLjDEFAAAK,Omega,all are blue OR small,There must be one medium blue and one small green triangle. They do not need to be touching.,"[['x1'],['x1','x2']]","Z.exists(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.and_operator(Z.and_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,2,'size')),Z.and_operator(Z.equal(x2,'green','colour'),Z.equal(x2,1,'size'))),Z.not_operator(Z.hor_operator(x1,x2,'contact'))),X),X)",bonan's rule,There must be at least one small green triangle.,[['x1']],"Z.atleast(lambda x1: Z.and_operator(Z.equal(x1,'green','colour'),Z.equal(x1,1,'size')),1,X)",bonan's rule,0
108,178,uYIREe2i4Q,UQIJo156uDVLjDEFAAAK,Upsilon,none are upright,There are at most 2 big red triangles touching each other.,"[['x1'],['x1','x2']]","Z.atmost(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.and_operator(Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,3,'size')),Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,3,'size'))),Z.hor_operator(x1,x2,'contact')),X),2,X)",bonan's rule,There are at most 2 big red triangles touching each other.,"[['x1'],['x1','x2']]","Z.atmost(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.and_operator(Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,3,'size')),Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,3,'size'))),Z.hor_operator(x1,x2,'contact')),X),2,X)",bonan's rule,0
109,179,uYIREe2i4Q,UQIJo156uDVLjDEFAAAK,Zeta,there is a red,It must have one big red triangle with a small triangle touching it.,"[['x1'],['x1','x2']]","Z.exists(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,3,'size')),Z.and_operator(Z.equal(x2,1,'size'),Z.hor_operator(x1,x2,'contact'))),X),X)",bonan's rule,It must have a red triangle with another triangle touching it.,"[['x1'],['x1','x2']]","Z.exists(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'red','colour'),Z.hor_operator(x1,x2,'contact')),X),X)",bonan's rule,0
110,180,l39wczr1qM,7ey5lg3pMFVpQce_AAAH,Iota,one is blue,There must be at least one blue cone.,[['x1']],"Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)",bonan's rule,There must be at least and no more than one blue cone,[['x1']],"Z.exactly(lambda x1: Z.equal(x1,'blue','colour'),1,X)",bonan's rule,0
111,181,l39wczr1qM,7ey5lg3pMFVpQce_AAAH,Zeta,there is a red,There must be at least one red cone.,[['x1']],"Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)",bonan's rule,There must be a least one red cone.,[['x1']],"Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)",bonan's rule,0
112,182,l39wczr1qM,7ey5lg3pMFVpQce_AAAH,Kappa,at least one is blue AND small,There must be at least one small blue cone.,[['x1']],"Z.atleast(lambda x1: Z.and_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,1,'size')),1,X)",bonan's rule,There must be at least one small blue cone.,[['x1']],"Z.atleast(lambda x1: Z.and_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,1,'size')),1,X)",bonan's rule,0
113,183,l39wczr1qM,7ey5lg3pMFVpQce_AAAH,Upsilon,none are upright,There must be a small blue cone facing left.,[['x1']],"Z.exists(lambda x1: Z.and_operator(Z.and_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,1,'size')),Z.equal(x1,'lhs','orientation')),X)",bonan's rule,There must be at least one cone laying on its side.,[['x1']],"Z.atleast(lambda x1: Z.not_operator(Z.equal(x1,'upright','orientation')),1,X)",bonan's rule,0
114,184,l39wczr1qM,7ey5lg3pMFVpQce_AAAH,Omega,all are blue OR small,There must be at least one blue cone pointing up.,[['x1']],"Z.atleast(lambda x1: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.equal(x1,'blue','colour')),1,X)",bonan's rule,There must be at least one blue cone.,[['x1']],"Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)",bonan's rule,0
115,185,l39wczr1qM,P5INvT1S-pUfBVIdAAAI,Iota,one is blue,There  must be at least one small cone ,[['x1']],"Z.atleast(lambda x1: Z.equal(x1,1,'size'),1,X)",bonan's rule,There should be at least one small cone,[['x1']],"Z.atleast(lambda x1: Z.equal(x1,1,'size'),1,X)",bonan's rule,0
116,186,l39wczr1qM,P5INvT1S-pUfBVIdAAAI,Zeta,there is a red,There is a one big green cone,[['x1']],"Z.exactly(lambda x1: Z.and_operator(Z.equal(x1,'green','colour'),Z.equal(x1,3,'size')),1,X)",bonan's rule,One big green cone is necessary,[['x1']],"Z.exactly(lambda x1: Z.and_operator(Z.equal(x1,'green','colour'),Z.equal(x1,3,'size')),1,X)",bonan's rule,0
117,187,l39wczr1qM,P5INvT1S-pUfBVIdAAAI,Kappa,at least one is blue AND small,Small purple cone should be present and standing strait,[['x1']],"Z.exists(lambda x1: Z.and_operator(Z.and_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,1,'size')),Z.equal(x1,'upright','orientation')),X)",bonan's rule, Small purple cone should be present and stand strait,[['x1']],"Z.exists(lambda x1: Z.and_operator(Z.and_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,1,'size')),Z.equal(x1,'upright','orientation')),X)",bonan's rule,0
118,188,l39wczr1qM,P5INvT1S-pUfBVIdAAAI,Upsilon,none are upright,All cones must be at not strait position,[['x1']],"Z.forall(lambda x1: Z.not_operator(Z.equal(x1,'upright','orientation')),X)",bonan's rule,Cones must be at not strait up position,[['x1']],"Z.forall(lambda x1: Z.not_operator(Z.equal(x1,'upright','orientation')),X)",bonan's rule,0
119,189,l39wczr1qM,P5INvT1S-pUfBVIdAAAI,Omega,all are blue OR small,Purple cones must be present (all sizes are OK ),[['x1']],"Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)",bonan's rule,Purple cones no matter the position,[['x1']],"Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)",bonan's rule,0
120,190,3FqaZitiM3,6dGY6eysj_-2bjNCAAAK,Iota,one is blue,there is exactly one blue,[['x1']],"Z.exactly(lambda x1: Z.equal(x1,'blue','colour'),1, X)",bonan's rule,there was exactly one blue,[['x1']],"Z.exactly(lambda x1: Z.equal(x1,'blue','colour'),1, X)",bonan's rule,0
121,192,3FqaZitiM3,6dGY6eysj_-2bjNCAAAK,Zeta,there is a red,the rule is to have 2 or more red,[['x1']],"Z.atleast(lambda x1: Z.equal(x1,'red','colour'),2,X)",bonan's rule,there would have to be exactly two red,[['x1']],"Z.exactly(lambda x1: Z.equal(x1,'red','colour'),2,X)",bonan's rule,0
122,195,3FqaZitiM3,Jw9DOmVyloFjpcRXAAAJ,Iota,one is blue,there is at least one blue,[['x1']],"Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)",bonan's rule,there is only one blue,[['x1']],"Z.exactly(lambda x1: Z.equal(x1,'blue','colour'),1,X)",bonan's rule,0
123,197,3FqaZitiM3,Jw9DOmVyloFjpcRXAAAJ,Zeta,there is a red,at least 2 red to be correct,[['x1']],"Z.atleast(lambda x1: Z.equal(x1,'red','colour'),2,X)",bonan's rule,there must be at least 2 red,[['x1']],"Z.atleast(lambda x1: Z.equal(x1,'red','colour'),2,X)",bonan's rule,0
124,199,3FqaZitiM3,Jw9DOmVyloFjpcRXAAAJ,Upsilon,none are upright,cones of different sizes must be pointing away from eachother.,"[['x1'],['x1','x2']]","Z.forall(lambda x1: Z.forall(lambda x2: Z.and_operator(Z.not_operator(Z.equal(x1,x2,'size')),Z.not_operator(Z.equal(x1,x2,'orientation'))),X),X)",bonan's rule,there must be cones of different sizes and color pointing in opposite directions,"[['x1'],['x1','x2']]","Z.forall(lambda x1: Z.forall(lambda x2: Z.and_operator(Z.not_operator(Z.equal(x1,x2,'size')),Z.not_operator(Z.equal(x1,x2,'orientation'))),X),X)",bonan's rule,0
125,200,z0OuaYpr2H,T3whPHkibRMFwKcJAAAN,Zeta,there is a red,"If there is at least one red cone, Zeta waves are emitted",[['x1']],"Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)",bonan's rule,"If there is at least one red cone, Zeta waves are emitted. ",[['x1']],"Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)",bonan's rule,0
126,201,z0OuaYpr2H,T3whPHkibRMFwKcJAAAN,Iota,one is blue,There must be at least one red cone with at least one (MAX) blue cone. ,[['x1']],"Z.atleast(lambda x1: Z.atmost(lambda x2: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x2,'blue','colour')),1,X),1,X)",bonan's rule,There must be at least one red cone and at least one (MAX) blue cone.,[['x1']],"Z.atleast(lambda x1: Z.atmost(lambda x2: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x2,'blue','colour')),1,X),1,X)",bonan's rule,0
127,203,z0OuaYpr2H,T3whPHkibRMFwKcJAAAN,Kappa,at least one is blue AND small,"If there are blue cones and no red cones. If there are red cones, blue cones must outnumber them or be smaller.",[['x1']],"Z.forall(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.not_operator(Z.equal(x1,'red','colour')),Z.equal(x2,'blue','colour')),X),X)",bonan's rule,"If there are blue cones and no red cones. If there are red cones, blue cones must outnumber them or be smaller. ",[['x1']],"Z.forall(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.not_operator(Z.equal(x1,'red','colour')),Z.equal(x2,'blue','colour')),X),X)",bonan's rule,0
128,208,z0OuaYpr2H,JTLrmcM2mG5PPqgaAAAO,Kappa,at least one is blue AND small,you must have all three cone sizes in an area. No touching cones of different colors and only cones that are upright.,"[['x1'],['x1','x2'],['x1','x2','x3']]","Z.exists(lambda x1: Z.exists(lambda x2: Z.exists(lambda x3: Z.and_operator(Z.and_operator(Z.equal(x1,1,'size'),Z.equal(x2,2,'size')),Z.equal(x3,3,'size')),X),X),X)",bonan's rule,There must be a purple cone nearby. Cones must be standing up. ,"[['x1'],['x1','x2']]","Z.exists(lambda x1: Z.forall(lambda x2: Z.and_operator(Z.equal(x1,'blue','colour'),Z.equal(x2,'upright','orientation')),X),X)",bonan's rule,0