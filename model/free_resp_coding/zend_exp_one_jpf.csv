,Unnamed: 0,Unnamed: 0.1,token_id,rule_name,rule_description,prior_feedback,bound_vars,prior_resp,prior_resp_bonan,posterior_feedback,bound_vars_post,post_resp,post_resp_bonan,bn_check
0,0,0,wHjhL,Iota,one is blue,This radiation requires 1 blue.,[['x1']],"Z.exactly(lambda x1: Z.equal(x1, 'blue','colour'), 1, X)",bonan's rule,This radiation requires just 1 blue.,[['x1']],"Z.exactly(lambda x1: Z.equal(x1, 'blue','colour'), 1, X)",bonan's rule,0
1,1,1,wHjhL,Zeta,there is a red,The red cones emit this radiation.,[['x1']],"Z.exists(lambda x1: Z.equal(x1, 'red','colour'), X)",bonan's rule,This radiation requires a red cone.,[['x1']],"Z.exists(lambda x1: Z.equal(x1, 'red','colour'), X)",bonan's rule,0
2,2,2,wHjhL,Omega,all are blue OR small,There needs to be 2 small cones or 1 medium cone,"[['x1'],['x1','x2']]","Z.exactly(lambda x1: Z.exactly(lambda x2: Z.and_operator(Z.equal(x1,1,'size'),Z.equal(x2,2,'size')),1,X),2,X)",bonan's rule,The radiation comes from 1 medium blue or 2 or more small cones.,"[['x1'],['x1','x2']]","Z.atleast(lambda x1: Z.exactly(lambda x2: Z.and_operator(Z.equal(x1,1,'size'),Z.and_operator(Z.equal(x2,2,'size'),Z.equal(x2,'blue','colour'))),1,X),2,X)",bonan's rule,0
3,3,3,wHjhL,Upsilon,none are upright,There needs to be 3 or less cones with 1 being a small blue,"[['x1'],['x1','x2']]","Z.exactly(lambda x1: Z.atmost(lambda x2: Z.and_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,1,'size')),3,X),1,X)",bonan's rule,There must be a small blue cone and two reds touching,"[['x1'],['x1','x2'],['x1','x2','x3']]","Z.exists(lambda x1: Z.exists(lambda x2: Z.exists(lambda x3: Z.and_operator(Z.and_operator(Z.and_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,1,'size')), Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x3,'red','colour'))),Z.hor_operator(x2,x3,'contact')),X),X),X)",bonan's rule,0
4,4,4,wHjhL,Kappa,at least one is blue AND small,This radiation comes from blue cones,[['x1']],"Z.exists(lambda x1: Z.equal(x1, 'blue','colour'), X)",bonan's rule,There must be at least one blue but there can not be three blues,"[['x1'],['x1','x2']]","Z.exists(lambda x1: Z.atmost(lambda x2: Z.and_operator(Z.equal(x1, 'blue','colour'),Z.equal(x2,'blue','colour')),2,X),X)",bonan's rule,0
5,5,5,ZECTn,Iota,one is blue,There needs to be at least one blue triangle.,[['x1']],"Z.atleast(lambda x1: Z.equal(x1, 'blue','colour'), 1, X)",bonan's rule,There must be exactly one blue triangle.,[['x1']],"Z.exactly(lambda x1: Z.equal(x1, 'blue','colour'), 1, X)",bonan's rule,0
6,6,6,ZECTn,Zeta,there is a red,There must be at least one red triangle.,[['x1']],"Z.atleast(lambda x1: Z.equal(x1, 'red','colour'), 1, X)",bonan's rule,There must be at least one red triangle.,[['x1']],"Z.atleast(lambda x1: Z.equal(x1, 'red','colour'), 1, X)",bonan's rule,0
7,7,7,ZECTn,Upsilon,none are upright,There must be exactly one blue triangle.,[['x1']],"Z.exactly(lambda x1: Z.equal(x1, 'blue','colour'),1,X)",bonan's rule,There must be exactly one blue triangle laying on its side.,[['x1']],"Z.exactly(lambda x1: Z.and_operator(Z.equal(x1, 'blue','colour'), Z.not_operator(Z.equal(x1,'upright','orientation'))),1,X)",bonan's rule,0
8,8,8,ZECTn,Kappa,at least one is blue AND small,There must be at least one small blue triangle.,[['x1']],"Z.atleast(lambda x1: Z.and_operator(Z.equal(x1, 'blue','colour'), Z.equal(x1, 1,'size')), 1, X)",bonan's rule,There must be at least one small blue triangle.,[['x1']],"Z.atleast(lambda x1: Z.and_operator(Z.equal(x1, 'blue','colour'), Z.equal(x1, 1,'size')), 1, X)",bonan's rule,0
9,9,9,ZECTn,Omega,all are blue OR small,There must be at least one blue triangle.,[['x1']],"Z.atleast(lambda x1: Z.equal(x1, 'blue','colour'), 1, X)",bonan's rule,There must be no red triangles.,[['x1']],"Z.forall(lambda x1: Z.not_operator(Z.equal(x1,'red','colour')),X)",bonan's rule,0
10,10,10,qEOSD,Omega,all are blue OR small,No Big Triangles ,[['x1']],"Z.forall(lambda x1: Z.not_operator(Z.equal(x1, 3,'size')), X)",bonan's rule,No big triangles and only 1 Medium Triangle,"[['x1'],['x1','x2']]","Z.exactly(lambda x1: Z.forall(lambda x2: Z.and_operator(Z.equal(x1,2,'size'),Z.not_operator(Z.equal(x2, 3,'size'))),X),1,X)",bonan's rule,0
11,11,11,qEOSD,Zeta,there is a red,Must have red cones ,[['x1']],"Z.exists(lambda x1: Z.equal(x1, 'red','colour'), X)",bonan's rule,Must be a red cone and waves will be emitted,[['x1']],"Z.exactly(lambda x1: Z.equal(x1, 'red','colour'),2,X)",bonan's rule,0
12,12,13,qEOSD,Upsilon,none are upright,Two big reds touching ,"[['x1'],['x1','x2']]","Z.exactly(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.and_operator(Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,3,'size')),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,3,'size'))), Z.hor_operator(x1,x2,'contact')),X),2,X)",bonan's rule,Two big red cones touching along with one other big cone,"[['x1'],['x1','x2'],['x1','x2','x3']]","Z.exactly(lambda x1: Z.exists(lambda x2: Z.exists(lambda x3: Z.and_operator(Z.and_operator(Z.and_operator(Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,3,'size')),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,3,'size'))), Z.hor_operator(x1,x2,'contact')), Z.equal(x3,3,'size')),X),X),2,X)",bonan's rule,0
13,16,23,rTu4H,Iota,one is blue,Any blue cone by itself or any blue cone touching a red or green cone,"[['x1'],['x1','x2']]","Z.exists(lambda x1: Z.exists(lambda x2: Z.or_operator(Z.equal(x1,'blue','colour'),Z.and_operator(Z.and_operator(Z.equal(x1,'blue','colour'),Z.or_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'green','colour'))),Z.hor_operator(x1,x2,'contact'))),X),X)",bonan's rule,Any scene that involves a blue cone ,[['x1']],"Z.exists(lambda x1:Z.equal(x1,'blue','colour'),X)",bonan's rule,0
14,18,30,AYXpS,Kappa,at least one is blue AND small,There has to be at least one small blue cone,[['x1']],"Z.atleast(lambda x1: Z.and_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,1,'size')),1,X)",bonan's rule,There has to be at least one small blue cone. ,[['x1']],"Z.atleast(lambda x1: Z.and_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,1,'size')),1,X)",bonan's rule,0
15,19,31,AYXpS,Iota,one is blue,There has to be exactly one medium blue cone.,[['x1']],"Z.atleast(lambda x1: Z.and_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,2,'size')),1,X)",bonan's rule,There has to be exactly one blue cone and it has to be medium,[['x1']],"Z.atleast(lambda x1: Z.and_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,2,'size')),1,X)",bonan's rule,1
16,21,33,AYXpS,Omega,all are blue OR small,There has to be at least one medium blue cone or one small green cone.,[['x1']],"Z.atleast(lambda x1: Z.or_operator(Z.and_operator(Z.equal(x1,2,'size'),Z.equal(x1,'blue','colour')),Z.and_operator(Z.equal(x1,1,'size'),Z.equal(x1,'green','colour'))),1,X)",bonan's rule,There has to be at least one blue cone of any size or one small green cone.,[['x1']],"Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.and_operator(Z.equal(x1,1,'size'),Z.equal(x1,'green','colour'))),1,X)",bonan's rule,0
17,22,34,AYXpS,Zeta,there is a red,There has to be at least one red cone of any size,[['x1']],"Z.atleast(lambda x1: Z.equal(x1, 'red','colour'), 1,X)",bonan's rule,There has to be at least on red cone of any size,[['x1']],"Z.atleast(lambda x1: Z.equal(x1, 'red','colour'), 1,X)",bonan's rule,0
18,23,36,JATf9,Omega,all are blue OR small,There must be at least one blue cone and one green come of any size.,"[['x1'],['x1','x2']]","Z.atleast(lambda x1: Z.atleast(lambda x2: Z.and_operator(Z.equal(x1,'green','colour'),Z.equal(x2,'blue','colour')),1,X),1,X)",bonan's rule,There must be at least one small green cone.,[['x1']],"Z.atleast(lambda x1: Z.and_operator(Z.equal(x1,'green','colour'),Z.equal(x1,1,'size')),1,X)",bonan's rule,0
19,24,37,JATf9,Upsilon,none are upright,There must be at least one blue cone that is leaned over.,[['x1']],"Z.atleast(lambda x1: Z.and_operator(Z.equal(x1,'blue','colour'),Z.not_operator(Z.equal(x1,'upright','orientation'))),1,X)",bonan's rule,There must be at least one cone tipped onto it's side.,[['x1']],"Z.atleast(lambda x1: Z.not_operator(Z.equal(x1,'upright','orientation')),1,X)",bonan's rule,0
20,25,38,JATf9,Kappa,at least one is blue AND small,There should be at least one small green cone and one small blue cone.,"[['x1'],['x1','x2']]","Z.atleast(lambda x1: Z.atleast(lambda x2: Z.and_operator(Z.and_operator(Z.equal(x1,'green','colour'),Z.equal(x1,1,'size')),Z.and_operator(Z.equal(x2,'blue','colour'),Z.equal(x2,1,'size'))),1,X),1,X)",bonan's rule,There must be at least one small blue cone.,[['x1']],"Z.atleast(lambda x1: Z.and_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,1,'size')),1,X)",bonan's rule,1
21,26,39,JATf9,Zeta,there is a red,There should be at least one red cone of any size.,[['x1']],"Z.atleast(lambda x1: Z.equal(x1, 'red','colour'), 1,X)",bonan's rule,There must be at least one red cone of any size in any orientation.,[['x1']],"Z.atleast(lambda x1: Z.equal(x1, 'red','colour'), 1,X)",bonan's rule,0
22,27,40,QgoZL,Zeta,there is a red,There must be at least one red cone.,[['x1']],"Z.atleast(lambda x1: Z.equal(x1, 'red','colour'), 1,X)",bonan's rule,There has to be at least one red.,[['x1']],"Z.atleast(lambda x1: Z.equal(x1, 'red','colour'), 1,X)",bonan's rule,0
23,28,42,QgoZL,Upsilon,none are upright,All cones must be tilted over.,[['x1']],"Z.forall(lambda x1: Z.not_operator(Z.equal(x1,'upright','orientation')), X)",bonan's rule,All cones must be tiled over on their side.,[['x1']],"Z.forall(lambda x1: Z.not_operator(Z.equal(x1,'upright','orientation')), X)",bonan's rule,0
24,29,45,4hBLT,Iota,one is blue,There must be at least one blue cone.,[['x1']],"Z.atleast(lambda x1: Z.equal(x1, 'blue','colour'), 1,X)",bonan's rule,There must be exactly one blue cone.,[['x1']],"Z.exactly(lambda x1: Z.equal(x1, 'blue','colour'), 1,X)",bonan's rule,0
25,30,46,4hBLT,Kappa,at least one is blue AND small,There must be at least one small blue cone.,[['x1']],"Z.atleast(lambda x1: Z.and_operator(Z.equal(x1, 'blue','colour'), Z.equal(x1, 1,'size')), 1, X)",bonan's rule,There must be at least one small blue cone.,[['x1']],"Z.atleast(lambda x1: Z.and_operator(Z.equal(x1, 'blue','colour'), Z.equal(x1, 1,'size')), 1, X)",bonan's rule,0
26,31,47,4hBLT,Omega,all are blue OR small,There must be at least one small cone of any color.,[['x1']],"Z.atleast(lambda x1: Z.equal(x1, 1,'size'), 1,X)",bonan's rule,There must be at least one blue cone of any size.,[['x1']],"Z.atleast(lambda x1: Z.equal(x1, 'blue','colour'), 1,X)",bonan's rule,0
27,32,48,4hBLT,Upsilon,none are upright,There has to be two red cones touching each other on their sides.,"[['x1'],['x1','x2']]","Z.exists(lambda x1: Z.exactly(lambda x2: Z.and_operator(Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x2,'red','colour')),Z.hor_operator(x1,x2,'contact')),2,X),X)",bonan's rule,There needs to be two of the same size cones laying on each other's sides.,"[['x1'],['x1','x2']]","Z.exists(lambda x1: Z.exactly(lambda x2: Z.and_operator(Z.equal(x1,x2,'size'),Z.hor_operator(x1,x2,'contact')),2,X),X)",bonan's rule,0
28,33,49,4hBLT,Zeta,there is a red,There must be at least one red cone of any size.,[['x1']],"Z.atleast(lambda x1: Z.equal(x1, 'red','colour'), 1,X)",bonan's rule,There must be at least one red cone of any size.,[['x1']],"Z.atleast(lambda x1: Z.equal(x1, 'red','colour'), 1,X)",bonan's rule,1
29,34,55,tGNdP,Upsilon,none are upright,As long as one or more objects are touching then it will emit radiation.,"[['x1'],['x1','x2']]","Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)",bonan's rule,I feel as though the rule may be as long as there are two reds touching and one other random cone then it will emit radiation.,"[['x1'],['x1','x2']]","Z.exists(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x2,'red','colour')),Z.hor_operator(x1,x2,'contact')),X),X)",bonan's rule,0
30,35,56,tGNdP,Kappa,at least one is blue AND small,I think you have to have a small blue cone and at least have one other cone bigger than the small blue one.,"[['x1'],['x1','x2']]","Z.exists(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.and_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,1,'size')),Z.and_operator(Z.not_operator(Z.equal(x2,'blue','colour')),Z.greater(x2,x1,'size'))),X),X)",bonan's rule,I think it's definitely having a smaller blue cone than one of the other cones that are on the screen.,"[['x1'],['x1','x2']]","Z.exists(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.and_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,1,'size')),Z.and_operator(Z.not_operator(Z.equal(x2,'blue','colour')),Z.greater(x2,x1,'size'))),X),X)",bonan's rule,0
31,36,57,tGNdP,Omega,all are blue OR small,I think as long as a smaller green triangle is touching a blue triangle then it emits radiation.,"[['x1'],['x1','x2']]","Z.exists(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.and_operator(Z.equal(x1,'green','colour'),Z.equal(x1,1,'size')),Z.and_operator(Z.equal(x2,'blue','colour'),Z.hor_operator(x1,x2,'contact'))),X),X)",bonan's rule,I'm a little lost on this one but I think as long as there is a large blue cone touching another smaller cone of any color then it should emit radiation.,"[['x1'],['x1','x2']]","Z.exists(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.and_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,3,'size')),Z.and_operator(Z.equal(x2,1,'size'),Z.hor_operator(x1,x2,'contact'))),X),X)",bonan's rule,0
32,37,58,tGNdP,Zeta,there is a red,As long as a red cone is touching another cone it will emit radiation.,"[['x1'],['x1','x2']]","Z.exists(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'red','colour'),Z.and_operator(Z.not_operator(Z.equal(x2,'red','colour')),Z.hor_operator(x1,x2,'contact'))),X),X)",bonan's rule,As long as there is at least one red cone then it will emit radiation.,[['x1']],"Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)",bonan's rule,0
33,38,59,tGNdP,Iota,one is blue,As long as there is a blue triangle then it will emit radiation.,[['x1']],"Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)",bonan's rule,There can be one and only one blue cone on the screen to emit radiation.,[['x1']],"Z.exactly(lambda x1: Z.equal(x1,'blue','colour'),1,X)",bonan's rule,0
34,39,60,3x2t1,Upsilon,none are upright,One or more small objects that are not standing straight up.,[['x1']],"Z.atleast(lambda x1: Z.and_operator(Z.equal(x1,1,'size'),Z.not_operator(Z.equal(x1,'upright','orientation'))),1,X)",bonan's rule,One or more Small objects that are not standing straight up.,[['x1']],"Z.atleast(lambda x1: Z.and_operator(Z.equal(x1,1,'size'),Z.not_operator(Z.equal(x1,'upright','orientation'))),1,X)",bonan's rule,0
35,40,61,3x2t1,Iota,one is blue,One or more Blue objects standing straight up.,[['x1']],"Z.atleast(lambda x1: Z.and_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'upright','orientation')),1,X)",bonan's rule,Exactly one blue object standing straight up.,[['x1']],"Z.exactly(lambda x1: Z.and_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'upright','orientation')),1,X)",bonan's rule,0
36,41,62,3x2t1,Zeta,there is a red,One or more red objects facing straight up.,[['x1']],"Z.atleast(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),1,X)",bonan's rule,At least one red object must be present and at least one object must be facing straight up.,"[['x1'],['x1','x2']]","Z.atleast(lambda x1: Z.atleast(lambda x2: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x2,'upright','orientation')),1,X),1,X)",bonan's rule,0
37,42,64,3x2t1,Kappa,at least one is blue AND small,There needs to be at least one object of each size.,"[['x1'],['x1','x2'],['x1','x2','x3']]","Z.atleast(lambda x1: Z.atleast(lambda x2: Z.atleast(lambda x3: Z.and_operator(Z.and_operator(Z.equal(x1,1,'size'),Z.equal(x2,2,'size')),Z.equal(x3,3,'size')),1,X),1,X),1,X)",bonan's rule,There must be at least 3 objects of either blue or green.,[['x1']],"Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),3,X)",bonan's rule,0
38,43,65,HSmD4,Iota,one is blue,There has to be only one blue triangle,[['x1']],"Z.exactly(lambda x1: Z.equal(x1,'blue','colour'),1,X)",bonan's rule,There has to be one and only one blue triangle,[['x1']],"Z.exactly(lambda x1: Z.equal(x1,'blue','colour'),1,X)",bonan's rule,0
39,44,66,HSmD4,Kappa,at least one is blue AND small,There has to be a small blue triangle,[['x1']],"Z.exists(lambda x1: Z.and_operator(Z.equal(x1,1,'size'),Z.equal(x1,'blue','colour')),X)",bonan's rule,There has to be at least one small blue triangle,[['x1']],"Z.atleast(lambda x1: Z.and_operator(Z.equal(x1,1,'size'),Z.equal(x1,'blue','colour')),1,X)",bonan's rule,0
40,45,67,HSmD4,Omega,all are blue OR small,There has to be either a small triangle or a blue medium triangle.,"[['x1'],['x1','x2']]","Z.exists(lambda x1: Z.exists(lambda x2: Z.or_operator(Z.and_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,2,'size')),Z.equal(x2,1,'size')),X),X)",bonan's rule,There has to be only small triangles or a blue triangle,"[['x1'],['x1','x2']]","Z.exists(lambda x1: Z.forall(lambda x2: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x2,1,'size')),X),X)",bonan's rule,0
41,46,68,HSmD4,Zeta,there is a red,There has to be at least one red triangle,[['x1']],"Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)",bonan's rule,There has to be at least one red triangle,[['x1']],"Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)",bonan's rule,0
42,47,69,HSmD4,Upsilon,none are upright,There has to be at least one triangle on its side,[['x1']],"Z.atleast(lambda x1: Z.not_operator(Z.equal(x1,'upright','orientation')),1,X)",bonan's rule,There has to be at least one triangle on its side and no other triangle standing upright,[['x1']],"Z.atleast(lambda x1: Z.forall(lambda x2: Z.and_operator(Z.not_operator(Z.equal(x1,'upright','orientation')),Z.not_operator(Z.equal(x2,'upright','orientation'))),X),1,X)",bonan's rule,0
43,48,76,seghl,Iota,one is blue,little green triangles,[['x1']],"Z.exists(lambda x1: Z.and_operator(Z.equal(x1,1,'size'),Z.equal(x1,'green','colour')),X)",bonan's rule,There has to be a little green triangle,[['x1']],"Z.exists(lambda x1: Z.and_operator(Z.equal(x1,1,'size'),Z.equal(x1,'green','colour')),X)",bonan's rule,0
44,49,79,seghl,Omega,all are blue OR small,There needs to be 2 green and a blue,"[['x1'],['x1','x2']]","Z.exactly(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'green','colour'),Z.equal(x2,'blue','colour')),X),2,X)",bonan's rule,There needs to be 2 green for a blue,"[['x1'],['x1','x2']]","Z.exactly(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'green','colour'),Z.equal(x2,'blue','colour')),X),2,X)",bonan's rule,1
45,50,80,9cMOT,Zeta,there is a red,There must be at least one red cone,[['x1']],"Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)",bonan's rule,cannot think of any other rule that could be true,[['x1']],"Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)",bonan's rule,1
46,51,81,9cMOT,Omega,all are blue OR small,There must be at least one blue or green cone,[['x1']],"Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'green','colour'), Z.equal(x1,'blue','colour')),1,X)",bonan's rule,There must be at least one small cone,[['x1']],"Z.atleast(lambda x1: Z.equal(x1,1,'size'),1,X)",bonan's rule,0
47,52,83,9cMOT,Iota,one is blue,There must be at least but no more than two cones touching,"[['x1'],['x1','x2']]","Z.atmost(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),2,X)",bonan's rule,cannot think of any rule that could be true,"[['x1'],['x1','x2']]","Z.atmost(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),2,X)",bonan's rule,1
48,53,84,9cMOT,Kappa,at least one is blue AND small,There must be at least one red large cone ,[['x1']],"Z.atleast(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,3,'size')),1,X)",bonan's rule,There has to be at least one green cone larger than any blue cone ,"[['x1'],['x1','x2']]","Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.and_operator(Z.equal(x1,'green','colour'),Z.equal(x2,'blue','colour')),Z.greater(x1,x2,'size')),X),1,X)",bonan's rule,1
49,54,85,jUCAC,Zeta,there is a red,there must be atleast one red cone and no blue cones.,"[['x1'],['x1','x2']]","Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'red','colour'),Z.not_operator(Z.equal(x2,'blue','colour'))),X),1,X)",bonan's rule,There must be atleast one red cone,[['x1']],"Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)",bonan's rule,1
50,55,86,jUCAC,Omega,all are blue OR small,There has to be atleast one cone touching a blue cone.,"[['x1'],['x1','x2']]","Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.and_operator(Z.equal(x1,'blue','colour'),Z.not_operator(Z.equal(x2,'blue','colour'))),Z.hor_operator(x1,x2,'contact')),X),1,X)",bonan's rule,There must be atleast one blue cone and it has to be touched by a smaller cone.,"[['x1'],['x1','x2']]","Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.and_operator(Z.equal(x1,'blue','colour'),Z.and_operator(Z.not_operator(Z.equal(x2,'blue','colour')),Z.less(x2,x1,'size'))),Z.hor_operator(x1,x2,'contact')),X),1,X)",bonan's rule,0
51,56,87,jUCAC,Upsilon,none are upright,No more than two red cones should be touching,"[['x1'],['x1','x2']]","Z.exactly(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x2,'red','colour')), Z.hor_operator(x1,x2,'contact')),X),2,X)",bonan's rule,There has to be two red cones touching each other with one leaning to the right.,"[['x1'],['x1','x2']]","Z.exactly(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.and_operator(Z.and_operator(Z.equal(x1,'red','colour'),Z.not_operator(Z.equal(x1,'upright','orientation'))),Z.equal(x2,'red','colour')), Z.hor_operator(x1,x2,'contact')),X),2,X)",bonan's rule,0
52,57,88,jUCAC,Iota,one is blue,There has to be three different colored cones.,"[['x1'],['x1','x2'],['x1','x2','x3']]","Z.exists(lambda x1: Z.exists(lambda x2: Z.exists(lambda x3: Z.and_operator(Z.and_operator(Z.equal(x1,'green','colour'),Z.equal(x2,'blue','colour')),Z.equal(x3,'red','colour')),X),X),X)",bonan's rule,Red cones are not neccesary but atleast two cones have to touch.,"[['x1'],['x1','x2']]","Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)",bonan's rule,0
53,58,90,6jBfW,Upsilon,none are upright,"There must be at least 1 red cone and 1 blue cone, and the red cone must be larger than the blue. All cones need to be tilted. ","[['x1'],['x1','x2'],['x1','x2','x3']]","Z.forall(lambda x1: Z.atleast(lambda x2: Z.atleast(lambda x3: Z.and_operator(Z.and_operator(Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x3,'blue','colour')),Z.greater(x2,x3,'size')),Z.not_operator(Z.equal(x1,'upright','orientation'))),1,X),1,X),X)",bonan's rule,There must be at least 2 red cones and 1 blue cone and the red cones must be larger. All cones must also be tilted. ,"[['x1'],['x1','x2'],['x1','x2','x3']]","Z.forall(lambda x1: Z.atleast(lambda x2: Z.atleast(lambda x3: Z.and_operator(Z.and_operator(Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x3,'blue','colour')),Z.greater(x2,x3,'size')),Z.not_operator(Z.equal(x1,'upright','orientation'))),2,X),1,X),X)",bonan's rule,0
54,59,91,6jBfW,Omega,all are blue OR small,There must be at least one blue cone and it has to be larger than any other cone placed with it. The blue cone must remain upright. ,"[['x1'],['x1','x2']]","Z.atleast(lambda x1: Z.atleast(lambda x2: Z.and_operator(Z.and_operator(Z.equal(x1,'blue','colour'),Z.greater(x1,x2,'size')),Z.equal(x1,'upright','orientation')),1,X),1,X)",bonan's rule,There must be at least 1 blue cone and it must be the largest cone. The bone cone must remain upright. ,"[['x1'],['x1','x2']]","Z.atleast(lambda x1: Z.atleast(lambda x2: Z.and_operator(Z.and_operator(Z.equal(x1,'blue','colour'),Z.greater(x1,x2,'size')),Z.equal(x1,'upright','orientation')),1,X),1,X)",bonan's rule,0
55,61,95,P7FU1,Kappa,at least one is blue AND small,There must be at least one large green triangle.,[['x1']],"Z.atleast(lambda x1: Z.and_operator(Z.equal(x1,'green','colour'),Z.equal(x1,3,'size')),1,X)",bonan's rule,There must be a green triangle and all triangles must be upright.,"[['x1'],['x1','x2']]","Z.exists(lambda x1: Z.forall(lambda x2: Z.and_operator(Z.equal(x1,'green','colour'),Z.equal(x2,'upright','orientation')),X),X)",bonan's rule,0
56,62,96,P7FU1,Iota,one is blue,Two large triangles must be touching.,"[['x1'],['x1','x2']]","Z.exactly(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.and_operator(Z.equal(x1,3,'size'),Z.equal(x2,3,'size')), Z.hor_operator(x1,x2,'contact')),X),2,X)",bonan's rule,A triangle must be touching a blue triangle.,"[['x1'],['x1','x2']]","Z.exists(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'blue','colour'), Z.hor_operator(x1,x2,'contact')),X),X)",bonan's rule,0
57,63,98,P7FU1,Zeta,there is a red,Triangles must be touching red triangle,"[['x1'],['x1','x2']]","Z.exactly(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.and_operator(Z.equal(x1,'red','colour'),Z.not_operator(Z.equal(x2,'red','colour'))), Z.hor_operator(x1,x2,'contact')),X),2,X)",bonan's rule,Triangles must be touching a red colored triangle at all times,"[['x1'],['x1','x2']]","Z.exists(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.and_operator(Z.equal(x1,'red','colour'),Z.not_operator(Z.equal(x2,'red','colour'))), Z.hor_operator(x1,x2,'contact')),X),X)",bonan's rule,0
58,64,101,HMsR4,Kappa,at least one is blue AND small,Kappa radiation is emitted by only small sized blue cones.,[['x1']],"Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,1,'size')),X)",bonan's rule,Small blue cones emit Kappa radiation regardless of orientation or if touched by another cone color. A small blue cone could be completely encapsulated by another colored cone and it will still emit Kappa radiation. ,[['x1']],"Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,1,'size')),X)",bonan's rule,0
59,65,102,HMsR4,Iota,one is blue,"Red and blue cones, of any size, when placed together and touching will emit Iota radiation. This occurs even when another larger green cone is placed over the group.","[['x1'],['x1','x2']]","Z.exists(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.and_operator(Z.equal(x1,'blue','colour'),Z.equal(x2,'red','colour')), Z.hor_operator(x1,x2,'contact')),X),X)",bonan's rule,Iota radiation is emitted as long as there is a blue cone of any size within a scene. ,[['x1']],"Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)",bonan's rule,0
60,66,103,HMsR4,Zeta,there is a red,Red cones of any size emit Zeta radiation regardless if they are touched by other colored cones and in any position.,[['x1']],"Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)",bonan's rule,Red cones of any size emit Zeta radiation regardless if they are touched by other colored cones and in any position. Neither blue nor green cones alone or in groups emit Zeta radiation. Neither blue nor green cones can impede the radiation of a red cone's Zeta radiation even if the red cone is completely encapsulated by the other cones.,[['x1']],"Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)",bonan's rule,0
61,67,105,uR94z,Upsilon,none are upright,There must be at least two reds touching and one of the smallest blue ones,"[['x1'],['x1','x2'],['x1','x2','x3']]","Z.exactly(lambda x1: Z.exists(lambda x2: Z.exists(lambda x3: Z.and_operator(Z.and_operator(Z.and_operator(Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,3,'size')),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,3,'size'))),Z.hor_operator(x1,x2,'contact')),Z.and_operator(Z.equal(x3,1,'size'),Z.equal(x3,'blue','colour'))),X),X),2,X)",bonan's rule,THere must be at least two large reds touching and at least one of the smallest blues,"[['x1'],['x1','x2'],['x1','x2','x3']]","Z.exactly(lambda x1: Z.exists(lambda x2: Z.exists(lambda x3: Z.and_operator(Z.and_operator(Z.and_operator(Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,3,'size')),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,3,'size'))),Z.hor_operator(x1,x2,'contact')),Z.and_operator(Z.equal(x3,1,'size'),Z.equal(x3,'blue','colour'))),X),X),2,X)",bonan's rule,0
62,68,106,uR94z,Kappa,at least one is blue AND small,There must be at least one small blue and one small green,"[['x1'],['x1','x2']]","Z.atleast(lambda x1: Z.atleast(lambda x2: Z.and_operator(Z.and_operator(Z.equal(x1,1,'size'),Z.equal(x1,'blue','colour')),Z.and_operator(Z.equal(x2,1,'size'),Z.equal(x2,'green','colour'))),1,X),1,X)",bonan's rule,There must be at least one small blue and at least one green,"[['x1'],['x1','x2']]","Z.atleast(lambda x1: Z.atleast(lambda x2: Z.and_operator(Z.and_operator(Z.equal(x1,1,'size'),Z.equal(x1,'blue','colour')),Z.equal(x2,'green','colour')),1,X),1,X)",bonan's rule,0
63,69,107,uR94z,Omega,all are blue OR small,Exactly two greens and only one blue...no other colors allowed,"[['x1'],['x1','x2']]","Z.exactly(lambda x1: Z.exactly(lambda x2: Z.and_operator(Z.equal(x1,'green','colour'),Z.equal(x2,'blue','colour')),1,X),2,X)",bonan's rule,At least two small of any color with one of any color larger than those.,"[['x1'],['x1','x2']]","Z.exactly(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,2,'size'),Z.greater(x2,x1,'size')),X),2,X)",bonan's rule,0
64,70,108,uR94z,Iota,one is blue,There must be at least one of each color,"[['x1'],['x1','x2'],['x1','x2','x3']]","Z.atleast(lambda x1: Z.atleast(lambda x2: Z.atleast(lambda x3: Z.and_operator(Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x2,'green','colour')),Z.equal(x3,'blue','colour')),1,X),1,X),1,X)",bonan's rule,There must be exactly one blue of any size,[['x1']],"Z.exactly(lambda x1: Z.equal(x1,'blue','colour'),1,X)",bonan's rule,1
65,71,109,uR94z,Zeta,there is a red,There must not be any blues at all,[['x1']],"Z.forall(lambda x1: Z.not_operator(Z.equal(x1,'blue','colour')),X)",bonan's rule,There must be at least one red.,[['x1']],"Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)",bonan's rule,0
66,72,110,x0d4k,Omega,all are blue OR small,There must be at least one blue cone of any size.,[['x1']],"Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)",bonan's rule,There must be a least one blue cone present of any size.,[['x1']],"Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)",bonan's rule,0
67,73,111,x0d4k,Kappa,at least one is blue AND small,There must be a least one small blue cone present.,[['x1']],"Z.atleast(lambda x1: Z.and_operator(Z.equal(x1,1,'size'),Z.equal(x1,'blue','colour')),1,X)",bonan's rule,There must be a least one small blue cone present.,[['x1']],"Z.atleast(lambda x1: Z.and_operator(Z.equal(x1,1,'size'),Z.equal(x1,'blue','colour')),1,X)",bonan's rule,1
68,74,112,x0d4k,Iota,one is blue,There must be only one medium size cone present.,[['x1']],"Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)",bonan's rule,There must be only one blue cone of any size present.,[['x1']],"Z.exactly(lambda x1: Z.equal(x1,'blue','colour'),1,X)",bonan's rule,0
69,75,113,x0d4k,Upsilon,none are upright,There must be blue cones on their side.,[['x1']],"Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'blue','colour'),Z.not_operator(Z.equal(x1,'upright','orientation'))),X)",bonan's rule,There can't be any cones pointing up.,[['x1']],"Z.forall(lambda x1: Z.not_operator(Z.equal(x1,'upright','orientation')),X)",bonan's rule,0
70,76,114,x0d4k,Zeta,there is a red,There must be a red cone present.,[['x1']],"Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)",bonan's rule,There must be a red cone present.,[['x1']],"Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)",bonan's rule,0
71,77,115,Ft3Te,Omega,all are blue OR small,There are 1 or 2 small green triangles and only small ones.,"[['x1'],['x1','x2']]","Z.forall(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.and_operator(Z.equal(x2,'green','colour'),Z.equal(x2,1,'size')), Z.equal(x1,1,'size')),X),X)",bonan's rule,There must be at least one small triangle and there cannot be a medium or large read triangle.,"[['x1'],['x1','x2']]","Z.atleast(lambda x1: Z.forall(lambda x2: Z.and_operator(Z.equal(x1,1,'size'),Z.not_operator(Z.and_operator(Z.or_operator(Z.equal(x2,2,'size'),Z.equal(x2,3,'size')),Z.equal(x2,'red','colour')))),X),1,X)",bonan's rule,0
72,78,116,Ft3Te,Kappa,at least one is blue AND small,there are at least 2 blue triangles.,[['x1']],"Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),2,X)",bonan's rule,There is at least one small blue triangle,[['x1']],"Z.atleast(lambda x1: Z.and_operator(Z.equal(x1,1,'size'),Z.equal(x1,'blue','colour')),1,X)",bonan's rule,0
73,79,117,Ft3Te,Iota,one is blue,There is at least one blue triangle,[['x1']],"Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)",bonan's rule,There is 1 but only 1 blue triangle.,[['x1']],"Z.exactly(lambda x1: Z.equal(x1,'blue','colour'),1,X)",bonan's rule,0
74,80,118,Ft3Te,Upsilon,none are upright,There are 2 red triangles of the same size touching.,"[['x1'],['x1','x2']]","Z.exists(lambda x1: Z.exactly(lambda x2: Z.and_operator(Z.and_operator(Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x2,'red','colour')),Z.equal(x1,x2,'size')),Z.hor_operator(x1,x2,'contact')),2,X),X)",bonan's rule,There are 2 triangles of the same color touching on their outside lines.,"[['x1'],['x1','x2']]","Z.exists(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,x2,'colour'),Z.hor_operator(x1,x2,'contact')),X),X)",bonan's rule,0
75,81,119,Ft3Te,Zeta,there is a red,There is at least 1 read triangle,[['x1']],"Z.atleast(lambda x1: Z.equal(x1, 'red','colour'), 1, X)",bonan's rule,There is at least one red triangle.,[['x1']],"Z.atleast(lambda x1: Z.equal(x1, 'red','colour'), 1, X)",bonan's rule,1
76,82,130,18SWe,Upsilon,none are upright,"There must be two big red. These two red must touch.
I'm not sure. I can't figure it out.","[['x1'],['x1','x2']]","Z.exactly(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.and_operator(Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,3,'size')),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,3,'size'))), Z.hor_operator(x1,x2,'contact')),X),2,X)",bonan's rule,"two big red ones must touch.
there must be a small one laying done.","[['x1'],['x1','x2']]","Z.exactly(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.and_operator(Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,3,'size')),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,3,'size'))), Z.hor_operator(x1,x2,'contact')),X),2,X)",bonan's rule,1
77,83,131,18SWe,Kappa,at least one is blue AND small,there must be two purple and two green.,"[['x1'],['x1','x2']]","Z.exactly(lambda x1: Z.exactly(lambda x2: Z.and_operator(Z.equal(x1,'green','colour'),Z.equal(x2,'blue','colour')),2,X),2,X)",bonan's rule,there must a small blue cone facing up.,[['x1']],"Z.exists(lambda x1: Z.and_operator(Z.and_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,1,'size')),Z.equal(x1,'upright','orientation')),X)",bonan's rule,0
78,84,132,18SWe,Iota,one is blue,There must be one of each color.,"[['x1'],['x1','x2'],['x1','x2','x3']]","Z.atleast(lambda x1: Z.atleast(lambda x2: Z.atleast(lambda x3: Z.and_operator(Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x2,'green','colour')),Z.equal(x3,'blue','colour')),1,X),1,X),1,X)",bonan's rule,"There must be one of each color.
can't figure out the 5th sample though.","[['x1'],['x1','x2'],['x1','x2','x3']]","Z.atleast(lambda x1: Z.atleast(lambda x2: Z.atleast(lambda x3: Z.and_operator(Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x2,'green','colour')),Z.equal(x3,'blue','colour')),1,X),1,X),1,X)",bonan's rule,1
79,85,134,18SWe,Omega,all are blue OR small,there must be a big blue and a small green.,"[['x1'],['x1','x2']]","Z.exists(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.and_operator(Z.equal(x1,'green','colour'),Z.equal(x1,1,'size')),Z.and_operator(Z.equal(x2,'blue','colour'),Z.equal(x2,3,'size'))),X),X)",bonan's rule,there must be a small green.,[['x1']],"Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'green','colour'),Z.equal(x1,1,'size')),X)",bonan's rule,0
80,86,140,VNO0H,Kappa,at least one is blue AND small,ITS DUE TO THE COMBINATION OF 2 BLUE AND 2 GREEN,"[['x1'],['x1','x2']]","Z.exactly(lambda x1: Z.exactly(lambda x2: Z.and_operator(Z.equal(x1,'blue','colour'),Z.equal(x2,'green','colour')),2,X),2,X)",bonan's rule,2 BLUE AND 3 GREEN,"[['x1'],['x1','x2']]","Z.exactly(lambda x1: Z.exactly(lambda x2: Z.and_operator(Z.equal(x1,'blue','colour'),Z.equal(x2,'green','colour')),3,X),2,X)",bonan's rule,1
81,87,142,VNO0H,Upsilon,none are upright,2 RED AND  1 BLUE ,"[['x1'],['x1','x2']]","Z.exactly(lambda x1: Z.exactly(lambda x2: Z.and_operator(Z.equal(x1,'blue','colour'),Z.equal(x2,'red','colour')),2,X),1,X)",bonan's rule,2 RED AND 1 BLUE,"[['x1'],['x1','x2']]","Z.exactly(lambda x1: Z.exactly(lambda x2: Z.and_operator(Z.equal(x1,'blue','colour'),Z.equal(x2,'red','colour')),2,X),1,X)",bonan's rule,1
82,88,143,VNO0H,Omega,all are blue OR small,2 GREEN AND 1 BLUE,"[['x1'],['x1','x2']]","Z.exactly(lambda x1: Z.exactly(lambda x2: Z.and_operator(Z.equal(x1,'green','colour'),Z.equal(x2,'red','colour')),2,X),1,X)",bonan's rule,2 GREEN AND 1 BLUE,"[['x1'],['x1','x2']]","Z.exactly(lambda x1: Z.exactly(lambda x2: Z.and_operator(Z.equal(x1,'green','colour'),Z.equal(x2,'red','colour')),2,X),1,X)",bonan's rule,0
83,89,144,VNO0H,Zeta,there is a red,2 RED AND 1 GREEN,"[['x1'],['x1','x2']]","Z.exactly(lambda x1: Z.exactly(lambda x2: Z.and_operator(Z.equal(x1,'blue','colour'),Z.equal(x2,'green','colour')),2,X),1,X)",bonan's rule,2 RED AND 1 GREEN,"[['x1'],['x1','x2']]","Z.exactly(lambda x1: Z.exactly(lambda x2: Z.and_operator(Z.equal(x1,'blue','colour'),Z.equal(x2,'green','colour')),2,X),1,X)",bonan's rule,0
84,90,145,Ppbut,Iota,one is blue,There must be at least one blue cone,[['x1']],"Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)",bonan's rule,There is exactly one blue cone.,[['x1']],"Z.exactly(lambda x1: Z.equal(x1,'blue','colour'),1,X)",bonan's rule,0
85,91,146,Ppbut,Upsilon,none are upright,There are exactly two red cones on their sides,[['x1']],"Z.exactly(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.not_operator(Z.equal(x1,'upright','orientation'))),2,X)",bonan's rule,No cones can be standing straight up,[['x1']],"Z.forall(lambda x1: Z.not_operator(Z.equal(x1,'upright','orientation')),X)",bonan's rule,0
86,92,147,Ppbut,Kappa,at least one is blue AND small,The smallest blue cone must be present,[['x1']],"Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,1,'size')),X)",bonan's rule,The smallest blue cone must be present,[['x1']],"Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,1,'size')),X)",bonan's rule,0
87,93,148,Ppbut,Omega,all are blue OR small,There is exactly one small cone,[['x1']],"Z.exactly(lambda x1: Z.equal(x1,1,'size'),1,X)",bonan's rule,There must not be a medium green cone,[['x1']],"Z.forall(lambda x1: Z.not_operator(Z.and_operator(Z.equal(x1,'green','colour'),Z.equal(x1,2,'size'))),X)",bonan's rule,0
88,94,149,Ppbut,Zeta,there is a red,There must be at least one red cone,[['x1']],"Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)",bonan's rule,There must be at least one red cone,[['x1']],"Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)",bonan's rule,1
89,95,153,jpl7c,Zeta,there is a red,It has to have all 3 colors,"[['x1'],['x1','x2'],['x1','x2','x3']]","Z.atleast(lambda x1: Z.atleast(lambda x2: Z.atleast(lambda x3: Z.and_operator(Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x2,'green','colour')),Z.equal(x3,'blue','colour')),1,X),1,X),1,X)",bonan's rule,The color combination works,"[['x1'],['x1','x2'],['x1','x2','x3']]","Z.atleast(lambda x1: Z.atleast(lambda x2: Z.atleast(lambda x3: Z.and_operator(Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x2,'green','colour')),Z.equal(x3,'blue','colour')),1,X),1,X),1,X)",bonan's rule,0
90,96,155,xg523,Iota,one is blue,The must be exactly one blue triangle.,[['x1']],"Z.exactly(lambda x1: Z.equal(x1,'blue','colour'),1,X)",bonan's rule,There is exactly one blue triangle.,[['x1']],"Z.exactly(lambda x1: Z.equal(x1,'blue','colour'),1,X)",bonan's rule,0
91,97,156,xg523,Kappa,at least one is blue AND small,There is more than 1 blue triangle.,[['x1']],"Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),2,X)",bonan's rule,There is at least one small blue triangle.,[['x1']],"Z.atleast(lambda x1: Z.and_operator(Z.equal(x1,1,'size'),Z.equal(x1,'blue','colour')),1,X)",bonan's rule,0
92,98,157,xg523,Omega,all are blue OR small,There is at least one blue triangle and no red triangles.,"[['x1'],['x1','x2']]","Z.atleast(lambda x1: Z.forall(lambda x2: Z.and_operator(Z.equal(x1,'blue','colour'),Z.not_operator(Z.equal(x2,'red','colour'))),X),1,X)",bonan's rule,"There is a blue triangle and, if there are any non-blue triangles, a blue triangle is larger than any other color triangle.","[['x1'],['x1','x2']]","Z.atleast(lambda x1: Z.forall(lambda x2: Z.and_operator(Z.equal(x1,'blue','colour'),Z.greater(x1,x2,'size')),X),1,X)",bonan's rule,0
93,99,158,xg523,Zeta,there is a red,There is at least one red triangle.,[['x1']],"Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)",bonan's rule,There is at least one red triangle.,[['x1']],"Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)",bonan's rule,0
94,100,159,xg523,Upsilon,none are upright,There is a blue triangle and it is the smallest triangle.,"[['x1'],['x1','x2']]","Z.exists(lambda x1: Z.forall(lambda x2: Z.and_operator(Z.equal(x1,'blue','colour'),Z.less(x1,x2,'size')),X),X)",bonan's rule,There is a blue triangle that is not upright.,[['x1']],"Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'blue','colour'),Z.not_operator(Z.equal(x1,'upright','orientation'))),X)",bonan's rule,1
95,101,160,wa1xN,Iota,one is blue,"Iota waves are emitted when all three colors are present. Size, orientation and position are not a factor.","[['x1'],['x1','x2'],['x1','x2','x3']]","Z.atleast(lambda x1: Z.atleast(lambda x2: Z.atleast(lambda x3: Z.and_operator(Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x2,'green','colour')),Z.equal(x3,'blue','colour')),1,X),1,X),1,X)",bonan's rule,All three colors must be present. There must be no more than 5 shapes.,"[['x1'],['x1','x2'],['x1','x2','x3']]","Z.atleast(lambda x1: Z.atleast(lambda x2: Z.atleast(lambda x3: Z.and_operator(Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x2,'green','colour')),Z.equal(x3,'blue','colour')),1,X),1,X),1,X)",bonan's rule,0
96,102,161,wa1xN,Upsilon,none are upright,Shapes cannot point upwards. Color has no effect.,[['x1']],"Z.forall(lambda x1: Z.not_operator(Z.equal(x1,'upright','orientation')), X)",bonan's rule,Shapes must be tilted or oriented in a way that they are not pointing directly upwards.,[['x1']],"Z.forall(lambda x1: Z.not_operator(Z.equal(x1,'upright','orientation')), X)",bonan's rule,0
97,103,162,wa1xN,Omega,all are blue OR small,There must be at least 2 small shapes.,[['x1']],"Z.atleast(lambda x1: Z.equal(x1,1,'size'),2,X)",bonan's rule,There must be at least 1 small shape.,[['x1']],"Z.atleast(lambda x1: Z.equal(x1,1,'size'),1,X)",bonan's rule,0
98,104,163,wa1xN,Kappa,at least one is blue AND small,There must be at least 2 blue triangles.,[['x1']],"Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),2,X)",bonan's rule,There must be at least 1 small blue triangle.,[['x1']],"Z.atleast(lambda x1: Z.and_operator(Z.equal(x1,1,'size'),Z.equal(x1,'blue','colour')),1,X)",bonan's rule,0
99,105,164,wa1xN,Zeta,there is a red,There must be at least 1 small red triangle.,[['x1']],"Z.atleast(lambda x1: Z.and_operator(Z.equal(x1,1,'size'),Z.equal(x1,'red','colour')),1,X)",bonan's rule,There must be at least 1 red triangle.,[['x1']],"Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)",bonan's rule,0
100,106,165,kJhBt,Upsilon,none are upright,Two same color with one leaning on the other.,"[['x1'],['x1','x2']]","Z.exists(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,x2,'colour'),Z.hor_operator(x1,x2,'contact')),X),X)",bonan's rule,Two individual pieces leaning on one another.,"[['x1'],['x1','x2']]","Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)",bonan's rule,0
101,108,167,kJhBt,Kappa,at least one is blue AND small,A small purple standing upright.,[['x1']],"Z.exists(lambda x1: Z.and_operator(Z.and_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,1,'size')),Z.equal(x1,'upright','orientation')),X)",bonan's rule,A small purple of any size.,[['x1']],"Z.forall(lambda x1: Z.equal(x1,'blue','colour'),X)",bonan's rule,0
102,109,168,kJhBt,Zeta,there is a red,Any red emits zeta waves.,[['x1']],"Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)",bonan's rule,"Any red makes the scene emit zeta wave radiation. I only chose the scene with the two greens, without any reds, because I had to pick another scene to get the continue button but I know the scene without reds isn't correct.",[['x1']],"Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)",bonan's rule,0
103,110,169,kJhBt,Iota,one is blue,A red and a purple in the scene together emit Iota waves.,"[['x1'],['x1','x2']]","Z.exists(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x2,'blue','colour')),X),X)",bonan's rule,A purple and a red combined or a purple and a green combined emit Iota waves.,"[['x1'],['x1','x2']]","Z.exists(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.or_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'green','colour')),Z.equal(x2,'blue','colour')),X),X)",bonan's rule,0
104,111,170,z8sk7,Zeta,there is a red,There must be at least one red cone.,[['x1']],"Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)",bonan's rule,There must be at last one red cone,[['x1']],"Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)",bonan's rule,0
105,112,171,z8sk7,Upsilon,none are upright,There must be two large red cones and no large blue cones.,"[['x1'],['x1','x2']]","Z.exactly(lambda x1: Z.forall(lambda x2: Z.and_operator(Z.and_operator(Z.equal(x1,3,'size'),Z.equal(x1,'red','colour')),Z.not_operator(Z.and_operator(Z.equal(x2,'blue','colour'),Z.equal(x2,3,'size')))),X),2,X)",bonan's rule,There must be exactly two red cones. There can not be a large blue cone.,"[['x1'],['x1','x2']]","Z.exactly(lambda x1: Z.forall(lambda x2: Z.and_operator(Z.and_operator(Z.equal(x1,3,'size'),Z.equal(x1,'red','colour')),Z.not_operator(Z.and_operator(Z.equal(x2,'blue','colour'),Z.equal(x2,3,'size')))),X),2,X)",bonan's rule,0
106,113,172,z8sk7,Iota,one is blue,There must be exactly one blue cone.,[['x1']],"Z.exactly(lambda x1: Z.equal(x1,'blue','colour'),1,X)",bonan's rule,There must be exactly one blue cone.,[['x1']],"Z.exactly(lambda x1: Z.equal(x1,'blue','colour'),1,X)",bonan's rule,1
107,114,173,z8sk7,Kappa,at least one is blue AND small,There must be at least one small blue cone.,[['x1']],"Z.atleast(lambda x1: Z.and_operator(Z.equal(x1,1,'size'),Z.equal(x1,'blue','colour')),1,X)",bonan's rule,There must be at least one small blue cone.,[['x1']],"Z.atleast(lambda x1: Z.and_operator(Z.equal(x1,1,'size'),Z.equal(x1,'blue','colour')),1,X)",bonan's rule,1
108,115,174,z8sk7,Omega,all are blue OR small,There must be no red cones.,[['x1']],"Z.forall(lambda x1: Z.not_operator(Z.equal(x1,'red','colour')),X)",bonan's rule,There must be no medium red cones. There must be no large red cones. There must be no large green cones.,"[['x1'],['x1','x2']]","Z.forall(lambda x1: Z.forall(lambda x2: Z.not_operator(Z.and_operator(Z.or_operator(Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,2,'size')),Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,3,'size'))),Z.and_operator(Z.equal(x2,'green','colour'),Z.equal(x2,3,'size')))),X),X)",bonan's rule,1
109,117,178,Nc8xY,Kappa,at least one is blue AND small,There must be at least one cone of each size,"[['x1'],['x1','x2'],['x1','x2','x3']]","Z.atleast(lambda x1: Z.atleast(lambda x2: Z.atleast(lambda x3: Z.and_operator(Z.and_operator(Z.equal(x1,1,'size'),Z.equal(x2,2,'size')),Z.equal(x3,3,'size')),1,X),1,X),1,X)",bonan's rule,There must be one cone of each size,"[['x1'],['x1','x2'],['x1','x2','x3']]","Z.atleast(lambda x1: Z.atleast(lambda x2: Z.atleast(lambda x3: Z.and_operator(Z.and_operator(Z.equal(x1,1,'size'),Z.equal(x2,2,'size')),Z.equal(x3,3,'size')),1,X),1,X),1,X)",bonan's rule,0
110,118,179,Nc8xY,Omega,all are blue OR small,There must be two small cones and one big cone,"[['x1'],['x1','x2']]","Z.exactly(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,1,'size'),Z.equal(x2,2,'size')),X),2,X)",bonan's rule,There must be at least two small green triangles and only one blue triangle,"[['x1'],['x1','x2']]","Z.atleast(lambda x1: Z.exactly(lambda x2: Z.and_operator(Z.and_operator(Z.equal(x1,1,'size'),Z.equal(x1,'green','colour')),Z.equal(x2,'blue','colour')),1,X),2,X)",bonan's rule,1
111,119,185,3Tji4,Omega,all are blue OR small,There must be a purple triangle larger than a green triangle,"[['x1'],['x1','x2']]","Z.exists(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.and_operator(Z.equal(x1,'blue','colour'),Z.equal(x2,'green','colour')),Z.greater(x1,x2,'size')),X),X)",bonan's rule,"There must be a small green triangle, and a purple triangle","[['x1'],['x1','x2']]","Z.exists(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'blue','colour'),Z.and_operator(Z.equal(x2,1,'size'),Z.equal(x2,'green','colour'))),X),X)",bonan's rule,0
112,120,186,3Tji4,Upsilon,none are upright,"There has to be two red triangles and at least one purple triangle, all not pointing up","[['x1'],['x1','x2']]","Z.exactly(lambda x1: Z.atleast(lambda x2: Z.and_operator(Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x2,'blue','colour')),Z.and_operator(Z.not_operator(Z.equal(x1,'upright','orientation')),Z.not_operator(Z.equal(x2,'upright','orientation')))),1,X),2,X)",bonan's rule,All triangles must not be pointing upwards ,[['x1']],"Z.forall(lambda x1: Z.not_operator(Z.equal(x1,'upright','orientation')),X)",bonan's rule,0
113,121,187,3Tji4,Zeta,there is a red,Must include a red triangle,[['x1']],"Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)",bonan's rule,Must include at least one small red triangle,[['x1']],"Z.atleast(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,1,'size')),1,X)",bonan's rule,1
114,122,188,3Tji4,Iota,one is blue,Must include only one purple triangle,[['x1']],"Z.exactly(lambda x1: Z.equal(x1,'blue','colour'),1,X)",bonan's rule,Must include only one purple triangle,[['x1']],"Z.exactly(lambda x1: Z.equal(x1,'blue','colour'),1,X)",bonan's rule,1
115,123,189,3Tji4,Kappa,at least one is blue AND small,Should have at least one small purple triangle pointing upwards,[['x1']],"Z.atleast(lambda x1: Z.and_operator(Z.and_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,1,'size')),Z.equal(x1,'upright','orientation')),1,X)",bonan's rule,Must include at least one small purple triangle,[['x1']],"Z.atleast(lambda x1: Z.and_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,1,'size')),1,X)",bonan's rule,1
116,125,197,rnnj1,Zeta,there is a red,all have to be pointing up,[['x1']],"Z.forall(lambda x1: Z.equal(x1,'upright','orientation'),X)",bonan's rule,use all of the colors,"[['x1'],['x1','x2'],['x1','x2','x3']]","Z.atleast(lambda x1: Z.atleast(lambda x2: Z.atleast(lambda x3: Z.and_operator(Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x2,'green','colour')),Z.equal(x3,'blue','colour')),1,X),1,X),1,X)",bonan's rule,0
117,126,199,rnnj1,Upsilon,none are upright,two reds and the a blue,"[['x1'],['x1','x2']]","Z.exactly(lambda x1: Z.exactly(lambda x2: Z.and_operator(Z.equal(x1,'blue','colour'),Z.equal(x2,'red','colour')),2,X),1,X)",bonan's rule,two reds and the a blue,"[['x1'],['x1','x2']]","Z.exactly(lambda x1: Z.exactly(lambda x2: Z.and_operator(Z.equal(x1,'blue','colour'),Z.equal(x2,'red','colour')),2,X),1,X)",bonan's rule,0
118,127,200,oYoA1,Kappa,at least one is blue AND small,the configuration must contain the smallest blue shape in any position,[['x1']],"Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,1,'size')),X)",bonan's rule,It must contain the smallest blue shape in any position,[['x1']],"Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,1,'size')),X)",bonan's rule,0
119,128,201,oYoA1,Iota,one is blue,it must contain the medium blue shape in any position.  This can be the only blue shape in the arrangement,[['x1']],"Z.atmost(lambda x1: Z.and_operator(Z.equal(x1,2,'size'),Z.equal(x1,'blue','colour')),1,X)",bonan's rule,There must be one middle sized blue shape in the scene.  it can be the only blue one in the scene.  there can be any quantity of other colors in there,[['x1']],"Z.atmost(lambda x1: Z.and_operator(Z.equal(x1,2,'size'),Z.equal(x1,'blue','colour')),1,X)",bonan's rule,0
120,129,202,oYoA1,Zeta,there is a red,the scene must contain any number of red shapes,[['x1']],"Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)",bonan's rule,There must be at least 1 red piece in the scene,[['x1']],"Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)",bonan's rule,1
121,130,203,oYoA1,Upsilon,none are upright,two red shapes need to be leaning,[['x1']],"Z.exactly(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.not_operator(Z.equal(x1,'upright','orientation'))),2,X)",bonan's rule,all shapes of any color or size need to be on their side,[['x1']],"Z.forall(lambda x1: Z.not_operator(Z.equal(x1,'upright','orientation')),X)",bonan's rule,0
122,131,204,oYoA1,Omega,all are blue OR small,There can be no more than 3 shapes and at least one must be blue in any position,"[['x1'],['x1','x2']]","Z.atleast(lambda x1: Z.atmost(lambda x2: Z.equal(x1,'blue','colour'),3,X),1,X)",bonan's rule,there can only be one blue shape in the scene,[['x1']],"Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)",bonan's rule,0
123,132,205,m11iV,Zeta,there is a red,The must be at least one red cone.,[['x1']],"Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)",bonan's rule,The must be at least one red cone.,[['x1']],"Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)",bonan's rule,0
124,133,207,m11iV,Upsilon,none are upright,All cones must be on their sides.,[['x1']],"Z.forall(lambda x1: Z.not_operator(Z.equal(x1,'upright','orientation')), X)",bonan's rule,No cones may be pointed up.,[['x1']],"Z.forall(lambda x1: Z.not_operator(Z.equal(x1,'upright','orientation')), X)",bonan's rule,0
125,134,208,m11iV,Iota,one is blue,The must be at least one blue cone.,[['x1']],"Z.atleast(lambda x1: Z.equal(x1, 'blue','colour'), 1, X)",bonan's rule,The must be at least one blue cone.,[['x1']],"Z.atleast(lambda x1: Z.equal(x1, 'blue','colour'), 1, X)",bonan's rule,0
126,135,209,m11iV,Omega,all are blue OR small,There must be at least one small cone .,[['x1']],"Z.atleast(lambda x1: Z.equal(x1,1,'size'),1,X)",bonan's rule,The cones must be small or the blue cones have to have the largest area.,"[['x1'],['x1','x2']]","Z.forall(lambda x1: Z.exists(lambda x2: Z.or_operator(Z.equal(x1,1,'size'),Z.and_operator(Z.equal(x2,'blue','colour'),Z.greater(x2,x1,'size'))),X),X)",bonan's rule,0
127,139,216,28sHU,Zeta,there is a red,There is exactly one big cone.,[['x1']],"Z.exactly(lambda x1: Z.equal(x1,3,'size'),1,X)",bonan's rule,There must be at least two different color small cones,"[['x1'],['x1','x2']]","Z.exists(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.and_operator(Z.equal(x1,1,'size'),Z.equal(x2,1,'size')),Z.not_operator(Z.equal(x1,x2,'colour'))),X),X)",bonan's rule,0
128,140,218,28sHU,Iota,one is blue,There must be at least one small cone.,[['x1']],"Z.atleast(lambda x1: Z.equal(x1,1,'size'),1,X)",bonan's rule,There must be at least two medium cones.,[['x1']],"Z.atleast(lambda x1: Z.equal(x1,2,'size'),2,X)",bonan's rule,0
129,143,221,eKeCo,Kappa,at least one is blue AND small,There must be at least one small purple cone.,[['x1']],"Z.atleast(lambda x1: Z.and_operator(Z.equal(x1,1,'size'),Z.equal(x1,'blue','colour')),1,X)",bonan's rule,There must be at least one small purple cone. The other cones don't matter.,[['x1']],"Z.atleast(lambda x1: Z.and_operator(Z.equal(x1,1,'size'),Z.equal(x1,'blue','colour')),1,X)",bonan's rule,0
130,145,224,eKeCo,Zeta,there is a red,"There must be at least one red cone. If it's a small one it needs to point to the left. If it's larger, it doesn't.",[['x1']],"Z.atleast(lambda x1: Z.or_operator(Z.and_operator(Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,1,'size')),Z.equal(x1,'lhs','orientation')),Z.and_operator(Z.equal(x1,'red','colour'),Z.not_operator(Z.equal(x1,1,'size')))),1,X)",bonan's rule,There must be at least one red cone and it doesn't matter the size or the direction it is pointing.,[['x1']],"Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)",bonan's rule,0
131,146,225,mfEzV,Omega,all are blue OR small,There must be at least one upright blue cone,[['x1']],"Z.atleast(lambda x1: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.equal(x1,'blue','colour')),1,X)",bonan's rule,There is exactly one blue cone. If there are Additional cones they must be in pairs,[['x1']],"Z.exactly(lambda x1: Z.equal(x1,'blue','colour'),1,X)",bonan's rule,0
132,147,226,mfEzV,Iota,one is blue,There must be at least one blue cone,[['x1']],"Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)",bonan's rule,There is exactly one blue cone,[['x1']],"Z.exactly(lambda x1: Z.equal(x1,'blue','colour'),1,X)",bonan's rule,0
133,149,229,mfEzV,Upsilon,none are upright,There must be at least 2 large cones of the same color touching and at least one small blue cone,"[['x1'],[['x1','x2'],['x1','x2','x3']]]","Z.exists(lambda x1: Z.atleast(lambda x2: Z.atleast(lambda x3: Z.and_operator(Z.and_operator(Z.and_operator(Z.equal(x1,3,'size'),Z.equal(x2,3,'size')),Z.hor_operator(x1,x2,'contact')), Z.and_operator(Z.equal(x3,'blue','colour'),Z.equal(x3,1,'size'))),1,X),2,X),X)",bonan's rule,There can be no cones that are upright.,[['x1']],"Z.forall(lambda x1: Z.not_operator(Z.equal(x1,'upright','orientation')),X)",bonan's rule,0
134,150,230,jj8N0,Kappa,at least one is blue AND small,There must be at least one small blue cone,[['x1']],"Z.atleast(lambda x1: Z.and_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,1,'size')),1,X)",bonan's rule,"There must be at least one small blue cone, and at least one medium or large cone present.","[['x1'],['x1','x2']]","Z.atleast(lambda x1: Z.atleast(lambda x2: Z.and_operator(Z.and_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,1,'size')), Z.or_operator(Z.equal(x2,2,'size'),Z.equal(x2,3,'size'))),1,X),1,X)",bonan's rule,0
135,151,233,jj8N0,Zeta,there is a red,"My tests made it seem like at least 1 large green and red cone must be present was the rule. However, based on the choices, it looks like it might that there must be at least 1 large green cone present. ",[['x1']],"Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)",bonan's rule,There must be at least one red and one green cone of any size/orientation. ,"[['x1'],['x1','x2']]","Z.atleast(lambda x1: Z.atleast(lambda x2: Z.and_operator(Z.equal(x1,'green','colour'), Z.equal(x2,'red','colour')),1,X),1,X)",bonan's rule,0
136,152,234,jj8N0,Iota,one is blue,Max of 1 red and blue cones of the same size are required.,"[['x1'],['x1','x2']]","Z.exactly(lambda x1: Z.exactly(lambda x2: Z.and_operator(Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'blue','colour')),Z.equal(x1,x2,'size')),1,X),1,X)",bonan's rule,Red and blue cones are required,"[['x1'],['x1','x2']]","Z.exists(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x2,'blue','colour')),X),X)",bonan's rule,1
137,153,240,awKAA,Zeta,there is a red,Red and green are the key,"[['x1'],['x1','x2']]","Z.exists(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'green','colour'),Z.equal(x2,'red','colour')),X),X)",bonan's rule,Green and red emit zeta.,"[['x1'],['x1','x2']]","Z.exists(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'green','colour'),Z.equal(x2,'red','colour')),X),X)",bonan's rule,0
138,156,244,awKAA,Omega,all are blue OR small,Small green is the key,[['x1']],"Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'green','colour'),Z.equal(x1,1,'size')),X)",bonan's rule,Small green triangle is the key,[['x1']],"Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'green','colour'),Z.equal(x1,1,'size')),X)",bonan's rule,0
139,157,245,2XvsB,Zeta,there is a red,Zeta waves are emitted if there is a triangle standing up and also one on its side or pointing anywhere other than up.,"[['x1'],['x1','x2']]","Z.exists(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.not_operator(Z.equal(x2,'upright','orientation'))),X),X)",bonan's rule,"If there is a red triangle present, zeta waves are emitted.",[['x1']],"Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)",bonan's rule,0
140,158,246,2XvsB,Kappa,at least one is blue AND small,"If there are a blue and green triangle present, Kappa waves are emitted
","[['x1'],['x1','x2']]","Z.exists(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'blue','colour'),Z.equal(x2,'green','colour')),X),X)",bonan's rule,"If there is a small blue triangle present, Kappa waves are emitted.",[['x1']],"Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,1,'size')),X)",bonan's rule,1
141,160,248,2XvsB,Upsilon,none are upright,blue or red triangles not pointing up,"[['x1'],['x1','x2']]","Z.exists(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.and_operator(Z.equal(x1,'blue','colour'),Z.not_operator(Z.equal(x1,'upright','orientation'))),Z.and_operator(Z.equal(x2,'green','colour'),Z.not_operator(Z.equal(x2,'upright','orientation')))),X),X)",bonan's rule,blue or red triangles without the presence of any triangle pointing up produces Upsilon Waves.,"[['x1'],['x1','x2'],['x1','x2','x3']]","Z.exists(lambda x1: Z.exists(lambda x2: Z.forall(lambda x3: Z.and_operator(Z.or_operator(Z.equal(x1,'blue','colour'), Z.equal(x2,'red','colour')),Z.not_operator(Z.equal(x3,'upright','orientation'))),X),X),X)",bonan's rule,0
142,161,249,2XvsB,Iota,one is blue,Any blue triangle present,[['x1']],"Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)",bonan's rule,A single blue triangle produces Iota waves.,[['x1']],"Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)",bonan's rule,1
143,162,250,oGvkb,Kappa,at least one is blue AND small,2 blue and 2 green,"[['x1'],['x1','x2']]","Z.exactly(lambda x1: Z.exactly(lambda x2: Z.and_operator(Z.equal(x1,'blue','colour'),Z.equal(x2,'green','colour')),2,X),2,X)",bonan's rule,2 blue and 3 green,"[['x1'],['x1','x2']]","Z.exactly(lambda x1: Z.exactly(lambda x2: Z.and_operator(Z.equal(x1,'blue','colour'),Z.equal(x2,'green','colour')),3,X),2,X)",bonan's rule,0
144,163,251,oGvkb,Omega,all are blue OR small,2 green and 1 blue,"[['x1'],['x1','x2']]","Z.exactly(lambda x1: Z.exactly(lambda x2: Z.and_operator(Z.equal(x1,'blue','colour'),Z.equal(x2,'green','colour')),2,X),1,X)",bonan's rule,2 green and 1 blue,"[['x1'],['x1','x2']]","Z.exactly(lambda x1: Z.exactly(lambda x2: Z.and_operator(Z.equal(x1,'blue','colour'),Z.equal(x2,'green','colour')),2,X),1,X)",bonan's rule,0
145,164,252,oGvkb,Zeta,there is a red,2 red and 1 green,"[['x1'],['x1','x2']]","Z.exactly(lambda x1: Z.exactly(lambda x2: Z.and_operator(Z.equal(x1,'green','colour'),Z.equal(x2,'red','colour')),2,X),1,X)",bonan's rule,2 red and 1 green,"[['x1'],['x1','x2']]","Z.exactly(lambda x1: Z.exactly(lambda x2: Z.and_operator(Z.equal(x1,'green','colour'),Z.equal(x2,'red','colour')),2,X),1,X)",bonan's rule,0
146,165,253,oGvkb,Iota,one is blue,"1 blue , 1 red and 1 green","[['x1'],['x1','x2'],['x1','x2','x3']]","Z.exactly(lambda x1: Z.exactly(lambda x2: Z.exactly(lambda x3: Z.and_operator(Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x2,'green','colour')),Z.equal(x3,'blue','colour')),1,X),1,X),1,X)",bonan's rule,"one blue , green and red","[['x1'],['x1','x2'],['x1','x2','x3']]","Z.exactly(lambda x1: Z.exactly(lambda x2: Z.exactly(lambda x3: Z.and_operator(Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x2,'green','colour')),Z.equal(x3,'blue','colour')),1,X),1,X),1,X)",bonan's rule,1
147,166,254,oGvkb,Upsilon,none are upright, 2 red and 1 blue,"[['x1'],['x1','x2']]","Z.exactly(lambda x1: Z.exactly(lambda x2: Z.and_operator(Z.equal(x1,'blue','colour'),Z.equal(x2,'red','colour')),2,X),1,X)",bonan's rule,2 red and 1 blue,"[['x1'],['x1','x2']]","Z.exactly(lambda x1: Z.exactly(lambda x2: Z.and_operator(Z.equal(x1,'blue','colour'),Z.equal(x2,'red','colour')),2,X),1,X)",bonan's rule,0
148,167,255,VmskZ,Upsilon,none are upright,"There has to be multiple red cones, at least two.  One cone has to be a larger cone for the radiation to work. ","[['x1'],['x1','x2']]","Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'red','colour'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,2,'size'))),X),2,X)",bonan's rule,"I think there has to be two red, one has to be large and at least one blue cone for the radiation to emit. ","[['x1'],['x1','x2'],['x1','x2','x3']]","Z.atleast(lambda x1: Z.exists(lambda x2: Z.atleast(lambda x3: Z.and_operator(Z.and_operator(Z.equal(x1,'red','colour'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,2,'size'))),Z.equal(x3,'blue','colour')),3,X),X),2,X)",bonan's rule,0
149,170,259,VmskZ,Zeta,there is a red,"There has to be at least one red.  There can be other colors, but red has to be present for the radiation to emit. ",[['x1']],"Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)",bonan's rule,"There can be any combination of any of the colors, but red must be present. ",[['x1']],"Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)",bonan's rule,0
150,171,260,oehIW,Iota,one is blue,There must be only one blue and one red cone.,"[['x1'],['x1','x2']]","Z.atmost(lambda x1: Z.atmost(lambda x2: Z.and_operator(Z.equal(x1,'blue','colour'),Z.equal(x2,'red','colour')),1,X),1,X)",bonan's rule,There must be at least one blue cone and at least one red one. There must not be more than one blue cone.,"[['x1'],['x1','x2']]","Z.atmost(lambda x1: Z.atleast(lambda x2: Z.and_operator(Z.equal(x1,'blue','colour'),Z.equal(x2,'red','colour')),1,X),1,X)",bonan's rule,1
151,172,261,oehIW,Upsilon,none are upright,None of the cones can be upright.,[['x1']],"Z.forall(lambda x1: Z.not_operator(Z.equal(x1,'upright','orientation')), X)",bonan's rule,None of the cones can be upright.,[['x1']],"Z.forall(lambda x1: Z.not_operator(Z.equal(x1,'upright','orientation')), X)",bonan's rule,0
152,173,263,oehIW,Zeta,there is a red,A red and green cone must be touching each other.,"[['x1'],['x1','x2']]","Z.exists(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x2,'green','colour')),Z.hor_operator(x1,x2,'contact')),X),X)",bonan's rule,A red cone must be touching another cone.,"[['x1'],['x1','x2']]","Z.exists(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.and_operator(Z.equal(x1,'red','colour'),Z.not_operator(Z.equal(x2,'red','colour'))),Z.hor_operator(x1,x2,'contact')),X),X)",bonan's rule,0
153,174,264,oehIW,Kappa,at least one is blue AND small,There must be at least 3 green cones. A green cone must be the biggest.,"[['x1'],['x1','x2'],['x1','x2','x3']]","Z.forall(lambda x1: Z.exists(lambda x2: Z.atleast(lambda x3: Z.and_operator(Z.and_operator(Z.equal(x1,'green','colour'),Z.greater(x1,x2,'size')),Z.equal(x3,'green','colour')),2,X),X),X)",bonan's rule,Green must be the biggest.,"[['x1'],['x1','x2']]","Z.exists(lambda x1: Z.forall(lambda x2: Z.and_operator(Z.equal(x1,'green','colour'),Z.greater(x1,x2,'size')),X),X)",bonan's rule,0
154,175,265,6djO6,Zeta,there is a red,There must be one upright red triangle to create Zeta waves.,[['x1']],"Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)",bonan's rule,There must be a red triangle for zeta waves to exist ,[['x1']],"Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)",bonan's rule,0
155,176,266,6djO6,Upsilon,none are upright,There must be a triangle that is laying on its side in order for Upsilon waves to occur,[['x1']],"Z.exists(lambda x1: Z.or_operator(Z.equal(x1,'lhs','orientation'),Z.equal(x1,'rhs','orientation')),X)",bonan's rule,The triangles must be diagonal or laying on the side to get Upsilon waves. Triangles must not be sitting upright.,[['x1']],"Z.forall(lambda x1: Z.not_operator(Z.equal(x1,'upright','orientation')),X)",bonan's rule,0
156,177,267,6djO6,Iota,one is blue,A blue triangle makes Iota waves,[['x1']],"Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)",bonan's rule,There must be only one blue triangle to create Iota waves.,[['x1']],"Z.exactly(lambda x1: Z.equal(x1,'blue','colour'),1,X)",bonan's rule,0
157,178,268,6djO6,Kappa,at least one is blue AND small,A small blue triangle and a big blue triangle are required to make kappa waves.,[['x1']],"Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,1,'size')),X)",bonan's rule,Two blue triangles of different sizes are required for Kappa waves.,"[['x1'],['x1','x2']]","Z.exists(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.and_operator(Z.equal(x1,'blue','colour'),Z.equal(x2,'blue','colour')),Z.not_operator(Z.equal(x1,x2,'size'))),X),X)",bonan's rule,0
158,179,269,6djO6,Omega,all are blue OR small,A small triangle is required for Omega waves,[['x1']],"Z.exists(lambda x1: Z.equal(x1,1,'size'),X)",bonan's rule,only small triangles can make omega waves,[['x1']],"Z.exists(lambda x1: Z.equal(x1,1,'size'),X)",bonan's rule,0
159,180,270,v2KgI,Omega,all are blue OR small,There must be at least two different colors,"[['x1'],['x1','x2']]","Z.atleast(lambda x1: Z.exists(lambda x2: Z.not_operator(Z.equal(x1,x2,'colour')),X),2,X)",bonan's rule,There must at least two different shapes.,"[['x1'],['x1','x2']]","Z.atleast(lambda x1: Z.exists(lambda x2: Z.not_operator(Z.equal(x1,x2,'size')),X),2,X)",bonan's rule,0
160,181,271,v2KgI,Iota,one is blue,There must be at least three different colours,"[['x1'],['x1','x2'],['x1','x2','x3']]","Z.atleast(lambda x1: Z.atleast(lambda x2: Z.atleast(lambda x3: Z.and_operator(Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x2,'green','colour')),Z.equal(x3,'blue','colour')),1,X),1,X),1,X)",bonan's rule,There must be at least three different colours.,"[['x1'],['x1','x2'],['x1','x2','x3']]","Z.atleast(lambda x1: Z.atleast(lambda x2: Z.atleast(lambda x3: Z.and_operator(Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x2,'green','colour')),Z.equal(x3,'blue','colour')),1,X),1,X),1,X)",bonan's rule,0
161,182,272,v2KgI,Upsilon,none are upright,There must be at least two different color and two different shapes.,"[['x1'],['x1','x2']]","Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.not_operator(Z.equal(x1,x2,'colour')),Z.not_operator(Z.equal(x1,x2,'size'))),X),2,X)",bonan's rule,There must be at least two different color and two different shapes,"[['x1'],['x1','x2']]","Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.not_operator(Z.equal(x1,x2,'colour')),Z.not_operator(Z.equal(x1,x2,'size'))),X),2,X)",bonan's rule,0
162,183,275,RCQCS,Zeta,there is a red,There must be at least one red triangle present to emit Zeta waves.,[['x1']],"Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)",bonan's rule,There must be at least one triangle present to emit Zeta waves.,[['x1']],"Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)",bonan's rule,0
163,185,277,RCQCS,Upsilon,none are upright,There must be a small blue triangle and a medium red triangle present. There must not be any green triangles present.,"[['x1'],['x1','x2'],['x1','x2','x3']]","Z.exists(lambda x1: Z.exists(lambda x2: Z.forall(lambda x3: Z.and_operator(Z.and_operator(Z.and_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,1,'size')),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,2,'size'))),Z.not_operator(Z.equal(x3,'green','colour'))),X),X),X)",bonan's rule,There must be at least one small blue triangle and one red triangle of any size. There must not be any green triangles present.,"[['x1'],['x1','x2'],['x1','x2','x3']]","Z.exists(lambda x1: Z.exists(lambda x2: Z.forall(lambda x3: Z.and_operator(Z.and_operator(Z.and_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,1,'size')),Z.equal(x2,'red','colour')),Z.not_operator(Z.equal(x3,'green','colour'))),X),X),X)",bonan's rule,0
164,186,278,RCQCS,Iota,one is blue,"There must only be one blue triangle, of any size, present.",[['x1']],"Z.exactly(lambda x1: Z.equal(x1,'blue','colour'),1,X)",bonan's rule,"There must be only one blue triangle, of any size, present.",[['x1']],"Z.exactly(lambda x1: Z.equal(x1,'blue','colour'),1,X)",bonan's rule,0
165,187,279,RCQCS,Kappa,at least one is blue AND small,At least one small blue triangle must be present.,[['x1']],"Z.atleast(lambda x1: Z.and_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,1,'size')),1,X)",bonan's rule,There must be at least one small blue triangle present.,[['x1']],"Z.atleast(lambda x1: Z.and_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,1,'size')),1,X)",bonan's rule,0
166,188,281,yzRdU,Omega,all are blue OR small,There must be at least one upside,[['x1']],"Z.atleast(lambda x1: Z.not_operator(Z.equal(x1,'upright','orientation')),1,X)",bonan's rule,There must be atleast one upside,[['x1']],"Z.atleast(lambda x1: Z.not_operator(Z.equal(x1,'upright','orientation')),1,X)",bonan's rule,0
167,190,295,ckg85,Kappa,at least one is blue AND small,The small blue pyramid causes the wave.,[['x1']],"Z.exists(lambda x1: Z.and_operator(Z.equal(x1,1,'size'),Z.equal(x1,'blue','colour')),X)",bonan's rule,The small blue pyramid causes this radiation.,[['x1']],"Z.exists(lambda x1: Z.and_operator(Z.equal(x1,1,'size'),Z.equal(x1,'blue','colour')),X)",bonan's rule,0
168,191,296,ckg85,Omega,all are blue OR small,The small green pyramid emits this radiation,[['x1']],"Z.exists(lambda x1: Z.and_operator(Z.equal(x1,1,'size'),Z.equal(x1,'green','colour')),X)",bonan's rule,The small green pyramid emits this radiation,[['x1']],"Z.exists(lambda x1: Z.and_operator(Z.equal(x1,1,'size'),Z.equal(x1,'green','colour')),X)",bonan's rule,0
169,192,297,ckg85,Iota,one is blue,medium blue emits this type,[['x1']],"Z.exists(lambda x1: Z.and_operator(Z.equal(x1,2,'size'),Z.equal(x1,'blue','colour')),X)",bonan's rule,The medium blue emits this type.,[['x1']],"Z.exists(lambda x1: Z.and_operator(Z.equal(x1,2,'size'),Z.equal(x1,'blue','colour')),X)",bonan's rule,0
170,193,299,ckg85,Zeta,there is a red,any sized red pyramid emits radiation,[['x1']],"Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)",bonan's rule,Any size of red pyramid in any combination emits,[['x1']],"Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)",bonan's rule,0
171,194,301,jqZgS,Omega,all are blue OR small,There has to be at least 1 of the large blue cones.,[['x1']],"Z.atleast(lambda x1: Z.and_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,3,'size')),1,X)",bonan's rule,There has to be a medium blue cone and a small green cone,"[['x1'],['x1','x2']]","Z.exists(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.and_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,2,'size')),Z.and_operator(Z.equal(x2,'green','colour'),Z.equal(x2,1,'size'))),X),X)",bonan's rule,1
172,196,303,jqZgS,Upsilon,none are upright,The cones need to be rotated,[['x1']],"Z.forall(lambda x1: Z.not_operator(Z.equal(x1,'upright','orientation')), X)",bonan's rule,There has to be at least a red and blue cone that is rotated. The red cone needs to be bigger than blue cone.,"[['x1'],['x1','x2']]","Z.atleast(lambda x1: Z.atleast(lambda x2: Z.and_operator(Z.and_operator(Z.and_operator(Z.equal(x1,'red','colour'),Z.not_operator(Z.equal(x1,'upright','orientation'))), Z.and_operator(Z.equal(x2,'blue','colour'),Z.not_operator(Z.equal(x2,'upright','orientation')))),Z.greater(x1,x2,'size')),1,X),1,X)",bonan's rule,0
173,197,304,jqZgS,Iota,one is blue,There has to be a blue and red cone leaning against each other.,"[['x1'],['x1','x2']]","Z.exists(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.and_operator(Z.equal(x1,'blue','colour'),Z.equal(x2,'blue','colour')),Z.hor_operator(x1,x2,'contact')),X),X)",bonan's rule,There has to be a blue and red cone tilted against each other. The red cone needs to be bigger.,"[['x1'],['x1','x2']]","Z.exists(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.and_operator(Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x2,'blue','colour')),Z.hor_operator(x1,x2,'contact')),Z.greater(x1,x2,'size')),X),X)",bonan's rule,0
174,198,310,kCrd3,Omega,all are blue OR small,There must be a medium purple triangle with an angled green triangle touching it,"[['x1'],['x1','x2']]","Z.exists(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.and_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,2,'size')),Z.and_operator(Z.not_operator(Z.equal(x2,'upright','orientation')),Z.hor_operator(x1,x2,'contact'))),X),X)",bonan's rule,There must be a purple triangle and a green triangle. The purple triangle must be larger than or equal to the green triangle.,"[['x1'],['x1','x2']]","Z.exists(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.and_operator(Z.equal(x1,'blue','colour'),Z.equal(x2,'green','colour')),Z.grequal(x1,x2,'size')),X),X)",bonan's rule,0
175,199,311,kCrd3,Iota,one is blue,It must have a purple triangle,[['x1']],"Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)",bonan's rule,Must have exactly one purple.,[['x1']],"Z.exactly(lambda x1: Z.equal(x1,'blue','colour'),1,X)",bonan's rule,0
176,200,312,kCrd3,Zeta,there is a red,Must have at least one red,[['x1']],"Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)",bonan's rule,There must be at least one red,[['x1']],"Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)",bonan's rule,1
177,201,313,kCrd3,Upsilon,none are upright,There must be red shapes and they must be on their side,[['x1']],"Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.not_operator(Z.equal(x1,'upright','orientation'))),X)",bonan's rule,"There must be no upright shapes, upright meaning open side down. All shapes must be on their side.",[['x1']],"Z.forall(lambda x1: Z.not_operator(Z.equal(x1,'upright','orientation')),X)",bonan's rule,0
178,203,320,6PmID,Zeta,there is a red,The arrangement has at least one red cone,[['x1']],"Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)",bonan's rule,The arrangement has at least one red cone,[['x1']],"Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)",bonan's rule,0
179,204,321,6PmID,Kappa,at least one is blue AND small,The arrangement contains at least two blue cones,[['x1']],"Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),2,X)",bonan's rule,The arrangement contains at least one small blue cone,[['x1']],"Z.atleast(lambda x1: Z.and_operator(Z.equal(x1,1,'size'),Z.equal(x1,'blue','colour')),1,X)",bonan's rule,1
180,205,322,6PmID,Iota,one is blue,The arrangement contains at most one blue cone,[['x1']],"Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)",bonan's rule,The arrangement contains at most one blue cone,[['x1']],"Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)",bonan's rule,0
181,206,323,6PmID,Omega,all are blue OR small,The arrangement must contain at least 2 small cones that are not blue,[['x1']],"Z.atleast(lambda x1: Z.and_operator(Z.equal(x1,1,'size'),Z.not_operator(Z.equal(x1,'blue','colour'))),2,X)",bonan's rule,The arrangement must not contain any medium or large red cones,[['x1']],"Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.or_operator(Z.equal(x1,2,'size'),Z.equal(x1,3,'size'))),X)",bonan's rule,0
182,207,324,6PmID,Upsilon,none are upright,The can be no upright cones,[['x1']],"Z.forall(lambda x1: Z.not_operator(Z.equal(x1,'upright','orientation')), X)",bonan's rule,The arrangement cannot contain upright cones,[['x1']],"Z.forall(lambda x1: Z.not_operator(Z.equal(x1,'upright','orientation')), X)",bonan's rule,0
183,208,325,Jjfll,Omega,all are blue OR small,The largest cone has to be blue. ,"[['x1'],['x1','x2']]","Z.forall(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'blue','colour'),Z.greater(x1,x2,'size')),X),X)",bonan's rule,The largest cone has to be blue.,"[['x1'],['x1','x2']]","Z.forall(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'blue','colour'),Z.greater(x1,x2,'size')),X),X)",bonan's rule,0
184,209,326,Jjfll,Iota,one is blue,There must only be one single green and one single blue cone.,"[['x1'],['x1','x2']]","Z.exactly(lambda x1: Z.exactly(lambda x2: Z.and_operator(Z.equal(x1,'blue','colour'),Z.equal(x2,'green','colour')),1,X),1,X)",bonan's rule,There must only be one blue and one green cone each.,"[['x1'],['x1','x2']]","Z.exactly(lambda x1: Z.exactly(lambda x2: Z.and_operator(Z.equal(x1,'blue','colour'),Z.equal(x2,'green','colour')),1,X),1,X)",bonan's rule,0
185,210,327,Jjfll,Kappa,at least one is blue AND small,A green cone has to be larger than a blue cone.,"[['x1'],['x1','x2']]","Z.exists(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.and_operator(Z.equal(x1,'green','colour'),Z.equal(x2,'blue','colour')),Z.greater(x1,x2,'size')),X),X)",bonan's rule,A green cone has to be larger than a blue cone.,"[['x1'],['x1','x2']]","Z.exists(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.and_operator(Z.equal(x1,'green','colour'),Z.equal(x2,'blue','colour')),Z.greater(x1,x2,'size')),X),X)",bonan's rule,0
186,211,328,Jjfll,Zeta,there is a red,One or more red cones are present.,[['x1']],"Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)",bonan's rule,One or more red cones have to be present.,[['x1']],"Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)",bonan's rule,0
187,212,329,Jjfll,Upsilon,none are upright,A red cone has to be the tallest object.,"[['x1'],['x1','x2']]","Z.exists(lambda x1: Z.forall(lambda x2: Z.and_operator(Z.equal(x1,'red','colour'),Z.greater(x1,x2,'size')),X),X)",bonan's rule,"A red cone has to be the largest object.
There must be no green cones.","[['x1'],['x1','x2']]","Z.exists(lambda x1: Z.forall(lambda x2: Z.and_operator(Z.equal(x1,'red','colour'),Z.greater(x1,x2,'size')),X),X)",bonan's rule,0
188,213,331,Ahfce,Kappa,at least one is blue AND small,Small blue cones emit radiation,[['x1']],"Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,1,'size')),X)",bonan's rule,Small blue cones emit radiation,[['x1']],"Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,1,'size')),X)",bonan's rule,0
189,214,332,Ahfce,Iota,one is blue,Medium blue cones emit iota waves,[['x1']],"Z.exists(lambda x1: Z.and_operator(Z.equal(x1,2,'size'),Z.equal(x1,'blue','colour')),X)",bonan's rule,Medium blue cones emit radiation. There is some exception here but I haven't figured it out yet,[['x1']],"Z.exists(lambda x1: Z.and_operator(Z.equal(x1,2,'size'),Z.equal(x1,'blue','colour')),X)",bonan's rule,0
190,215,334,Ahfce,Zeta,there is a red,Red cones emit zeta waves,[['x1']],"Z.exists(lambda x1: Z.equal(x1, 'red','colour'), X)",bonan's rule,Red cones emit zeta waves,[['x1']],"Z.exists(lambda x1: Z.equal(x1, 'red','colour'), X)",bonan's rule,0
191,217,336,6j5zV,Kappa,at least one is blue AND small,Anything with a small blue cone works,[['x1']],"Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,1,'size')),X)",bonan's rule,must have a small blue cone in it,[['x1']],"Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,1,'size')),X)",bonan's rule,0
192,218,337,6j5zV,Zeta,there is a red,Must have at least one red cone in it any size or direction,[['x1']],"Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)",bonan's rule,"Must have at least one red cone in it, any size or direction",[['x1']],"Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)",bonan's rule,0
193,219,338,6j5zV,Upsilon,none are upright,Can't have any cone standing straight up.,[['x1']],"Z.forall(lambda x1: Z.not_operator(Z.equal(x1,'upright','orientation')), X)",bonan's rule,Can't have any cone standing straight up.,[['x1']],"Z.forall(lambda x1: Z.not_operator(Z.equal(x1,'upright','orientation')), X)",bonan's rule,0
194,220,339,6j5zV,Iota,one is blue,must have a blue cone anywhere in it,[['x1']],"Z.exists(lambda x1: Z.equal(x1, 'blue','colour'), X)",bonan's rule,Must have some type of blue cone in it doesn't matter the direction or size.,[['x1']],"Z.exists(lambda x1: Z.equal(x1, 'blue','colour'), X)",bonan's rule,0
195,221,340,f1oqs,Iota,one is blue,There must be at least one large red triangle present with at least two other smaller triangles.,"[['x1'],['x1','x2']]","Z.atleast(lambda x1: Z.atleast(lambda x2: Z.and_operator(Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,3,'size')),Z.equal(x2,1,'size')),2,X),1,X)",bonan's rule,"There must be at least one large, red triangle and at least two small triangles of different colors.","[['x1'],['x1','x2']]","Z.atleast(lambda x1: Z.atleast(lambda x2: Z.and_operator(Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,3,'size')),Z.equal(x2,1,'size')),2,X),1,X)",bonan's rule,0
196,222,341,f1oqs,Omega,all are blue OR small,"There must be at least one large, blue triangle and at least two smaller triangles of any color.","[['x1'],['x1','x2']]","Z.atleast(lambda x1: Z.atleast(lambda x2: Z.and_operator(Z.and_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,3,'size')),Z.equal(x2,1,'size')),2,X),1,X)",bonan's rule,"There must be at least one large, blue triangle and there must be at least two of the smallest triangles of any color.","[['x1'],['x1','x2']]","Z.atleast(lambda x1: Z.atleast(lambda x2: Z.and_operator(Z.and_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,3,'size')),Z.equal(x2,1,'size')),2,X),1,X)",bonan's rule,0
197,223,344,f1oqs,Kappa,at least one is blue AND small,"There must be at least one large, green triangle and there must be at least two other triangles of different colors and sizes.","[['x1'],['x1','x2']]","Z.atleast(lambda x1: Z.atleast(lambda x2: Z.and_operator(Z.and_operator(Z.equal(x1,'green','colour'),Z.equal(x1,3,'size')),Z.not_operator(Z.equal(x2,1,'size'))),2,X),1,X)",bonan's rule,"There must be one large triangle and it must be green.  Any other number of triangles can be present, but they must be smaller.","[['x1'],['x1','x2']]","Z.atleast(lambda x1: Z.forall(lambda x2: Z.and_operator(Z.and_operator(Z.equal(x1,'green','colour'),Z.equal(x1,3,'size')),Z.less(x2,x1,'size')),X),1,X)",bonan's rule,0
198,224,347,fD5gC,Omega,all are blue OR small,One blue cone must be there in the combination that too in an upright position.,[['x1']],"Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'upright','orientation')),X)",bonan's rule,The blue color cone must be larger than the green one.,"[['x1'],['x1','x2','x3']]","Z.exists(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.and_operator(Z.equal(x1,'blue','colour'),Z.equal(x2,'green','colour')),Z.greater(x1,x2,'size')),X),X)",bonan's rule,0
199,225,348,fD5gC,Zeta,there is a red,At least one red cone should be bigger than at one green cone.,"[['x1'],['x1','x2']]","Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'red','colour'),Z.and_operator(Z.equal(x2,'green','colour'),Z.greater(x1,x2,'size'))),X),1,X)",bonan's rule,There should be at least one red cone in the combination.,[['x1']],"Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)",bonan's rule,0
200,226,349,fD5gC,Kappa,at least one is blue AND small,There should be at least one small blue cone.,[['x1']],"Z.atleast(lambda x1: Z.and_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,1,'size')),1,X)",bonan's rule,There should be at least one small blue cone.,[['x1']],"Z.atleast(lambda x1: Z.and_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,1,'size')),1,X)",bonan's rule,0
201,227,355,i8DCA,Iota,one is blue,There has to be a medium blue cone.,[['x1']],"Z.atleast(lambda x1: Z.and_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,2,'size')),1,X)",bonan's rule,There must be a blue cone.,[['x1']],"Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)",bonan's rule,0
202,228,356,i8DCA,Omega,all are blue OR small,There can't be a red cone.,[['x1']],"Z.forall(lambda x1: Z.not_operator(Z.equal(x1,'red','colour')),X)",bonan's rule,There can't be a red cone.,[['x1']],"Z.forall(lambda x1: Z.not_operator(Z.equal(x1,'red','colour')),X)",bonan's rule,0
203,229,358,i8DCA,Zeta,there is a red,There must be a red cone.,[['x1']],"Z.exists(lambda x1: Z.equal(x1, 'red','colour'), X)",bonan's rule,There must be a red cone.,[['x1']],"Z.exists(lambda x1: Z.equal(x1, 'red','colour'), X)",bonan's rule,0
204,230,359,i8DCA,Kappa,at least one is blue AND small,There has to be two cones standing up right. ,[['x1']],"Z.exactly(lambda x1: Z.equal(x1,'upright','orientation'),2,X)",bonan's rule,There has to be a small blue cone.,[['x1']],"Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,1,'size')),X)",bonan's rule,0
205,232,366,dh7Xd,Zeta,there is a red,There must be two cones of either the same or varying size and of any color touching one another; they may need to be in the same orientation as well.,"[['x1'],['x1','x2']]","Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)",bonan's rule,"There must be at least two cones present that are touching one another, regardless of size, color, or orientation.","[['x1'],['x1','x2']]","Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)",bonan's rule,1
206,233,367,dh7Xd,Iota,one is blue,"All three colors of cone must be present, but size and orientation do not matter. There cannot be more than five total cones present.","[['x1'],['x1','x2'],['x1','x2','x3']]","Z.exists(lambda x1: Z.exists(lambda x2: Z.exists(lambda x3: Z.and_operator(Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x2,'green','colour')),Z.equal(x3,'blue','colour')),X),X),X)",bonan's rule,"All three colors of cone must be present, usually regardless of size and orientation. There can be no more than four total cones present.","[['x1'],['x1','x2'],['x1','x2','x3']]","Z.exists(lambda x1: Z.exists(lambda x2: Z.exists(lambda x3: Z.and_operator(Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x2,'green','colour')),Z.equal(x3,'blue','colour')),X),X),X)",bonan's rule,0
207,234,368,dh7Xd,Upsilon,none are upright,"There can be no upright cones present. There may need to be at least one small cone present as well, but color doesn't appear to matter, nor does whether or not the cones touch.",[['x1']],"Z.forall(lambda x1: Z.not_operator(Z.equal(x1,'upright','orientation')), X)",bonan's rule,"There can be no upright cones present. Color, size, and orientation otherwise do not appear to matter; there may be an upper limit on the number of cones present.",[['x1']],"Z.forall(lambda x1: Z.not_operator(Z.equal(x1,'upright','orientation')), X)",bonan's rule,0
208,235,369,dh7Xd,Kappa,at least one is blue AND small,There must be at least one small blue cone present.,[['x1']],"Z.atleast(lambda x1: Z.and_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,1,'size')),1,X)",bonan's rule,"There must be at least one small blue cone present. Beyond that, it does not matter what other cones are present, regardless of color, orientation, size, or count.",[['x1']],"Z.atleast(lambda x1: Z.and_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,1,'size')),1,X)",bonan's rule,0
209,237,373,OA5AW,Upsilon,none are upright,Two large cones are touching without being stacked.,"[['x1'],['x1','x2']]","Z.exists(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.and_operator(Z.equal(x1,3,'size'),Z.equal(x2,3,'size')),Z.hor_operator(x1,x2,'contact')),X),X)",bonan's rule,Cones are in contact without being stacked.,"[['x1'],['x1','x2']]","Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)",bonan's rule,0
210,238,374,OA5AW,Zeta,there is a red,There is at least one red cone.,[['x1']],"Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)",bonan's rule,There is at least one red cone.,[['x1']],"Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)",bonan's rule,0
211,239,385,GFtqh,Omega,all are blue OR small,"As long as there is a blue triangle in there, it will emit radiation.",[['x1']],"Z.exists(lambda x1: Z.equal(x1, 'blue','colour'), X)",bonan's rule,"It will emit so long as there is a blue triangle, but not a green triangle that is larger than it.","[['x1'],['x1','x2']]","Z.exists(lambda x1: Z.forall(lambda x2: Z.and_operator(Z.equal(x1, 'blue','colour'),Z.not_operator(Z.and_operator(Z.equal(x2,'green','colour'),Z.greater(x2,x1,'size')))),X),X)",bonan's rule,0
212,240,386,GFtqh,Zeta,there is a red,Anything with a red triangle in it will emit radiation.,[['x1']],"Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)",bonan's rule,Anything with a red triangle will emit radiation.,[['x1']],"Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)",bonan's rule,0
213,241,387,GFtqh,Upsilon,none are upright,Two red triangles of any size must be next to each other.,"[['x1'],['x1','x2']]","Z.exists(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x2,'red','colour')),Z.hor_operator(x1,x2,'contact')),X),X)",bonan's rule,Two red triangles have to be touching with the majority of one side of each triangle touching.,"[['x1'],['x1','x2']]","Z.exists(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x2,'red','colour')),Z.hor_operator(x1,x2,'contact')),X),X)",bonan's rule,0
214,242,388,GFtqh,Iota,one is blue,"There must be a blue triangle present, and no green triangle present.","[['x1'],['x1','x2']]","Z.exists(lambda x1: Z.forall(lambda x2: Z.and_operator(Z.equal(x1,'blue','colour'),Z.not_operator(Z.equal(x2,'green','colour'))),X),X)",bonan's rule,There must be a blue triangle present.,[['x1']],"Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)",bonan's rule,0
215,243,389,GFtqh,Kappa,at least one is blue AND small,There must be a small blue triangle present at all times. ,[['x1']],"Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,1,'size')),X)",bonan's rule,There must be a small blue triangle present at all times.,[['x1']],"Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,1,'size')),X)",bonan's rule,1
216,244,390,TSQ2l,Zeta,there is a red,There must be at least one red cone of any size in any position or orientation,[['x1']],"Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)",bonan's rule,There must be at least one red cone of any size in any orientation or position.,[['x1']],"Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)",bonan's rule,0
217,245,391,TSQ2l,Upsilon,none are upright,There must be at least one cone of any color and size on its side in any location. There must not be any upright cones of any size or color in any position.,[['x1']],"Z.forall(lambda x1: Z.not_operator(Z.equal(x1,'upright','orientation')), X)",bonan's rule,There may be no upright cones of any color or size at any position.  Everything else if fine.,[['x1']],"Z.forall(lambda x1: Z.not_operator(Z.equal(x1,'upright','orientation')), X)",bonan's rule,0
218,247,393,TSQ2l,Iota,one is blue,There must be a blue cone of any size or color in any orientation or position.,[['x1']],"Z.exists(lambda x1: Z.equal(x1, 'blue','colour'), X)",bonan's rule,There must be one and only one blue cone of any size and in any orientation and at any position. There may be as many or as few of any other types of cones as desired.,[['x1']],"Z.exactly(lambda x1: Z.equal(x1, 'blue','colour'),1,X)",bonan's rule,0
219,248,394,TSQ2l,Kappa,at least one is blue AND small,There must be a small blue cone in any orientation at any position.,[['x1']],"Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,1,'size')),X)",bonan's rule,"There must be at least one small blue cone in any orientation at any position, and it is allowed to overlap other cones.  Any other cones may be present in any orientation and at any position.",[['x1']],"Z.atleast(lambda x1: Z.and_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,1,'size')),1,X)",bonan's rule,0
220,249,405,c8KKW,Upsilon,none are upright,There must be at least one small triangle on its side,[['x1']],"Z.atleast(lambda x1: Z.and_operator(Z.equal(x1,1,'size'),Z.or_operator(Z.equal(x1,'lhs','orientation'),Z.equal(x1,'rhs','orientation'))),1,X)",bonan's rule,no triangle can be upright,[['x1']],"Z.forall(lambda x1: Z.not_operator(Z.equal(x1,'upright','orientation')),X)",bonan's rule,0
221,250,406,c8KKW,Omega,all are blue OR small,there must be one blue triangle,[['x1']],"Z.exactly(lambda x1: Z.equal(x1,'blue','colour'),1,X)",bonan's rule,The largest triangle must be blue,"[['x1'],['x1','x2']]","Z.exists(lambda x1: Z.forall(lambda x2: Z.and_operator(Z.equal(x1,'blue','colour'), Z.and_operator(Z.not_operator(Z.equal(x2,'blue','colour')),Z.less(x2,x1,'size'))),X),X)",bonan's rule,0
222,251,407,c8KKW,Zeta,there is a red,there must be at least one red triangle,[['x1']],"Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)",bonan's rule,There must be at least one red triangle,[['x1']],"Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)",bonan's rule,0
223,252,408,c8KKW,Iota,one is blue,there must be one blue triangle but no more than one,[['x1']],"Z.exactly(lambda x1: Z.equal(x1,'blue','colour'),1,X)",bonan's rule,There must be a single blue triangle,[['x1']],"Z.exactly(lambda x1: Z.equal(x1,'blue','colour'),1,X)",bonan's rule,1
224,253,409,c8KKW,Kappa,at least one is blue AND small,there must be at least one small blue triangle,[['x1']],"Z.atleast(lambda x1: Z.and_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,1,'size')),1,X)",bonan's rule,There must be at least one small blue triangle,[['x1']],"Z.atleast(lambda x1: Z.and_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,1,'size')),1,X)",bonan's rule,0
225,254,410,8QtIO,Zeta,there is a red,There must be at least one red cone.,[['x1']],"Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)",bonan's rule,There must be at least one red cone.,[['x1']],"Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)",bonan's rule,0
226,255,411,8QtIO,Omega,all are blue OR small,There must be one small green cone and one medium blue.,"[['x1'],['x1','x2']]","Z.exists(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.and_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,2,'size')),Z.and_operator(Z.equal(x2,'green','colour'),Z.equal(x2,1,'size'))),X),X)",bonan's rule,There must be at least one small green cone and no more than one bigger cone.,"[['x1'],['x1','x2']]","Z.exists(lambda x1: Z.atmost(lambda x2: Z.and_operator(Z.and_operator(Z.equal(x1,'green','colour'),Z.equal(x1,1,'size')),Z.greater(x2,x1,'size')),1,X),X)",bonan's rule,0
227,256,413,8QtIO,Kappa,at least one is blue AND small,There must be at least one small blue cone.,[['x1']],"Z.atleast(lambda x1: Z.and_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,1,'size')),1,X)",bonan's rule,There must be at least one small blue cone.,[['x1']],"Z.atleast(lambda x1: Z.and_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,1,'size')),1,X)",bonan's rule,0
228,257,416,0A5AL,Iota,one is blue,A large blue cone must be there.,[['x1']],"Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,3,'size')),X)",bonan's rule,A blue cone must be present.,[['x1']],"Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)",bonan's rule,0
229,258,417,0A5AL,Omega,all are blue OR small,A blue or green cone must be present,[['x1']],"Z.exists(lambda x1: Z.or_operator(Z.equal(x1,'green','colour'),Z.equal(x1,'blue','colour')),X)",bonan's rule,A small or medium green or blue cone must be present.,[['x1']],"Z.exists(lambda x1: Z.or_operator(Z.and_operator(Z.or_operator(Z.equal(x1,1,'size'),Z.equal(x1,2,'size')),Z.equal(x1,'green','colour')),Z.equal(x1,'blue','colour')),X)",bonan's rule,0
230,259,418,0A5AL,Zeta,there is a red,A red or green cone must be present.,[['x1']],"Z.exists(lambda x1: Z.or_operator(Z.equal(x1,'green','colour'),Z.equal(x1,'red','colour')),X)",bonan's rule,A red or a green cone must be present.,[['x1']],"Z.exists(lambda x1: Z.or_operator(Z.equal(x1,'green','colour'),Z.equal(x1,'red','colour')),X)",bonan's rule,0
231,260,419,0A5AL,Kappa,at least one is blue AND small,A small blue cone must be present.,[['x1']],"Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,1,'size')),X)",bonan's rule,"A small blue cone must be present.
",[['x1']],"Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,1,'size')),X)",bonan's rule,0
232,261,420,NKgB0,Kappa,at least one is blue AND small,There must be at least one small blue cone. ,[['x1']],"Z.atleast(lambda x1: Z.and_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,1,'size')),1,X)",bonan's rule,There must be at least one small blue cone. ,[['x1']],"Z.atleast(lambda x1: Z.and_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,1,'size')),1,X)",bonan's rule,0
233,262,421,NKgB0,Iota,one is blue,There must be at least one red and one blue cone. ,"[['x1'],['x1','x2']]","Z.atleast(lambda x1: Z.atleast(lambda x2: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x2,'blue','colour')),1,X),1,X)",bonan's rule,There must be one blue and one red cone and no more of those colors. ,"[['x1'],['x1','x2']]","Z.exactly(lambda x1: Z.exactly(lambda x2: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x2,'blue','colour')),1,X),1,X)",bonan's rule,0
234,264,423,NKgB0,Zeta,there is a red,There must be at least one red cone. ,[['x1']],"Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)",bonan's rule,There must be at least one red cone. ,[['x1']],"Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)",bonan's rule,0
235,265,425,oEa5W,Omega,all are blue OR small,There must be at least two small triangles.,[['x1']],"Z.atleast(lambda x1: Z.equal(x1,1,'size'),2,X)",bonan's rule,There must be at least two small triangles or one large and one small triangle.,"[['x1'],['x1','x2']]","Z.exists(lambda x1: Z.exists(lambda x2: Z.or_operator(Z.and_operator(Z.equal(x1,1,'size'),Z.equal(x2,1,'size')),Z.and_operator(Z.equal(x1,1,'size'),Z.equal(x2,3,'size'))),X),X)",bonan's rule,0
236,266,426,oEa5W,Zeta,there is a red,There must be at least one red triangle of any size.,[['x1']],"Z.atleast(lambda x1: Z.equal(x1, 'red','colour'), 1, X)",bonan's rule,There must be at least one red triangle of any size.,[['x1']],"Z.atleast(lambda x1: Z.equal(x1, 'red','colour'), 1, X)",bonan's rule,0
237,267,427,oEa5W,Kappa,at least one is blue AND small,There must be at least one blue triangle.,[['x1']],"Z.atleast(lambda x1: Z.equal(x1, 'blue','colour'), 1,X)",bonan's rule,There must be at least one small blue triangle.,[['x1']],"Z.atleast(lambda x1: Z.and_operator(Z.equal(x1,1,'size'),Z.equal(x1, 'blue','colour')), 1,X)",bonan's rule,1
238,268,429,oEa5W,Iota,one is blue,"There must be at least one blue triangle, plus a triangle of another color.","[['x1'],['x1','x2']]","Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'blue','colour'),Z.not_operator(Z.equal(x2,'blue','colour'))),X),1,X)",bonan's rule,"There must be at least one blue triangle of any size, plus either a red or green triangle of any size.","[['x1'],['x1','x2']]","Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'blue','colour'),Z.not_operator(Z.equal(x2,'blue','colour'))),X),1,X)",bonan's rule,0
239,270,431,143NC,Kappa,at least one is blue AND small,There must be at least one small blue cone,[['x1']],"Z.atleast(lambda x1: Z.and_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,1,'size')),1,X)",bonan's rule,There must be at least one small blue cone,[['x1']],"Z.atleast(lambda x1: Z.and_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,1,'size')),1,X)",bonan's rule,0
240,271,432,143NC,Iota,one is blue,There is exactly one blue cone,[['x1']],"Z.exactly(lambda x1: Z.equal(x1,'blue','colour'),1,X)",bonan's rule,There is exactly one blue cone,[['x1']],"Z.exactly(lambda x1: Z.equal(x1,'blue','colour'),1,X)",bonan's rule,0
241,272,433,143NC,Upsilon,none are upright,There must be at least one blue cone not facing up,[['x1']],"Z.atleast(lambda x1: Z.and_operator(Z.equal(x1,'blue','colour'),Z.not_operator(Z.equal(x1,'upright','orientation'))),1,X)",bonan's rule,There are no cones facing up,[['x1']],"Z.forall(lambda x1: Z.not_operator(Z.equal(x1,'upright','orientation')),X)",bonan's rule,0
242,273,434,143NC,Zeta,there is a red,There must be at least one red cone,[['x1']],"Z.atleast(lambda x1: Z.equal(x1, 'red','colour'), 1, X)",bonan's rule,There must be at least one red cone,[['x1']],"Z.atleast(lambda x1: Z.equal(x1, 'red','colour'), 1, X)",bonan's rule,0
243,274,437,ITONF,Zeta,there is a red,There cannot be any small blue triangles ,[['x1']],"Z.forall(lambda x1: Z.not_operator(Z.and_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,1,'size'))),X)",bonan's rule,There must be at least one triangle on its side,[['x1']],"Z.atleast(lambda x1: Z.not_operator(Z.equal(x1,'upright','orientation')),1,X)",bonan's rule,0
244,276,439,ITONF,Omega,all are blue OR small,There cannot be any red triangles,[['x1']],"Z.forall(lambda x1: Z.not_operator(Z.equal(x1,'red','colour')),X)",bonan's rule,There must be at least two small triangles,[['x1']],"Z.atleast(lambda x1: Z.equal(x1,2,'size'),2,X)",bonan's rule,0
245,277,443,ynjTM,Upsilon,none are upright,Any and all cones must not be standing such that the vertex points straight upward.,[['x1']],"Z.forall(lambda x1: Z.not_operator(Z.equal(x1,'upright','orientation')), X)",bonan's rule,No cone must be standing such that the vertex points straight upward.,[['x1']],"Z.forall(lambda x1: Z.not_operator(Z.equal(x1,'upright','orientation')), X)",bonan's rule,0
246,278,444,ynjTM,Zeta,there is a red,There must be at least one red and one green cone.,"[['x1'],['x1','x2']]","Z.atleast(lambda x1: Z.atleast(lambda x2: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x2,'green','colour')),1,X),1,X)",bonan's rule,There must be at least one red cone and at least one other cone.,"[['x1'],['x1','x2']]","Z.atleast(lambda x1: Z.atleast(lambda x2: Z.and_operator(Z.equal(x1,'red','colour'),Z.not_operator(Z.equal(x2,'red','colour'))),1,X),1,X)",bonan's rule,0
247,279,445,NUeKa,Omega,all are blue OR small,there must be some with the same color.  There must be a little cone and a big cone. ,"[['x1'],['x1','x2']]","Z.exists(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.and_operator(Z.equal(x1,1,'size'),Z.equal(x2,2,'size')),Z.equal(x1,x2,'colour')),X),X)",bonan's rule,there must be 2 of one color. ,"[['x1'],['x1','x2']]","Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'colour'),X),X)",bonan's rule,0