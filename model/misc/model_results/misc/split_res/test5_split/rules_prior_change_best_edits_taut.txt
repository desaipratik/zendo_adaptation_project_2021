["Z.exists(lambda x1: Z.lequal(x1,2,'size'),X)"]
["Z.exists(lambda x1: Z.not_operator(Z.and_operator(Z.greater(x1,1,'size'),Z.lequal(x1,1,'size'))),X)"]
["Z.atmost(lambda x1: Z.forall(lambda x2: Z.not_operator(Z.lequal(x1,x2,'size')),X),1,X)"]
["Z.exactly(lambda x1: Z.not_operator(Z.and_operator(Z.not_operator(Z.not_operator(Z.and_operator(Z.or_operator(Z.grequal(x1,1,'size'),Z.greater(x1,1,'size')),Z.equal(x1,'upright','orientation')))),Z.and_operator(Z.not_operator(Z.not_operator(Z.grequal(x1,1,'size'))),Z.not_operator(Z.equal(x1,'yes','grounded'))))),3,X)"]
["Z.exists(lambda x1: Z.lequal(x1,3,'size'),X)"]
["Z.exactly(lambda x1: Z.exists(lambda x2: Z.not_operator(Z.not_operator(Z.and_operator(Z.not_operator(Z.not_operator(Z.not_operator(Z.hor_operator(x2,x1,'contact')))),Z.equal(x1,'no','grounded')))),X),3,X)"]
["Z.forall(lambda x1: Z.lequal(x1,3,'size'),X)"]
["Z.forall(lambda x1: Z.greater(x1,1,'size'),X)"]
["Z.atleast(lambda x1: Z.grequal(x1,2,'size'),1,X)"]
["Z.atmost(lambda x1: Z.equal(x1,'no','grounded'),3,X)"]
["Z.exactly(lambda x1: Z.greater(x1,2,'size'),2,X)"]
["Z.exactly(lambda x1: Z.not_operator(Z.equal(x1,3,'size')),3,X)"]
["Z.atmost(lambda x1: Z.exists(lambda x2: Z.not_operator(Z.less(x2,2,'size')),X),2,X)"]
["Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),2,X)"]
["Z.forall(lambda x1: Z.equal(x1,2,'size'),X)"]
["Z.atmost(lambda x1: Z.equal(x1,'no','grounded'),1,X)"]
["Z.atleast(lambda x1: Z.atmost(lambda x2: Z.exists(lambda x3: Z.or_operator(Z.or_operator(Z.lequal(x1,1,'size'),Z.and_operator(Z.or_operator(Z.equal(x3,'green','colour'),Z.grequal(x2,x1,'size')),Z.equal(x1,x2,'size'))),Z.equal(x2,'no','grounded')),X),2,X),2,X)"]
["Z.forall(lambda x1: Z.equal(x1,'rhs','orientation'),X)"]
["Z.exists(lambda x1: Z.forall(lambda x2: Z.and_operator(Z.not_operator(Z.hor_operator(x2,x1,'contact')),Z.equal(x1,'upright','orientation')),X),X)"]
["Z.forall(lambda x1: Z.exists(lambda x2: Z.not_operator(Z.less(x1,2,'size')),X),X)"]
["Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)"]
["Z.exists(lambda x1: Z.atleast(lambda x2: Z.forall(lambda x3: Z.and_operator(Z.not_operator(Z.grequal(x3,x1,'size')),Z.and_operator(Z.or_operator(Z.not_operator(Z.lequal(x3,2,'size')),Z.grequal(x2,1,'size')),Z.grequal(x1,x3,'size'))),X),3,X),X)"]
["Z.atmost(lambda x1: Z.exists(lambda x2: Z.forall(lambda x3: Z.greater(x3,3,'size'),X),X),2,X)"]
["Z.exactly(lambda x1: Z.or_operator(Z.equal(x1,'upright','orientation'),Z.not_operator(Z.greater(x1,1,'size'))),2,X)"]
["Z.forall(lambda x1: Z.or_operator(Z.not_operator(Z.equal(x1,'blue','colour')),Z.or_operator(Z.and_operator(Z.or_operator(Z.equal(x1,'rhs','orientation'),Z.and_operator(Z.less(x1,2,'size'),Z.greater(x1,1,'size'))),Z.not_operator(Z.and_operator(Z.equal(x1,1,'size'),Z.grequal(x1,3,'size')))),Z.less(x1,1,'size'))),X)"]
["Z.exists(lambda x1: Z.lequal(x1,2,'size'),X)"]
["Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)"]
["Z.exists(lambda x1: Z.not_operator(Z.equal(x1,'red','colour')),X)"]
["Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)"]
["Z.exists(lambda x1: Z.or_operator(Z.equal(x1,'rhs','orientation'),Z.greater(x1,1,'size')),X)"]
["Z.exactly(lambda x1: Z.exists(lambda x2: Z.not_operator(Z.hor_operator(x1,x2,'contact')),X),3,X)"]
["Z.forall(lambda x1: Z.or_operator(Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'rhs','orientation')))),Z.not_operator(Z.not_operator(Z.and_operator(Z.or_operator(Z.not_operator(Z.grequal(x1,2,'size')),Z.equal(x1,3,'size')),Z.not_operator(Z.equal(x1,'red','colour')))))),X)"]
["Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)"]
["Z.atleast(lambda x1: Z.exists(lambda x2: Z.forall(lambda x3: Z.equal(x3,x1,'grounded'),X),X),2,X)"]
["Z.exists(lambda x1: Z.not_operator(Z.greater(x1,2,'size')),X)"]
["Z.forall(lambda x1: Z.atmost(lambda x2: Z.equal(x1,x2,'size'),2,X),X)"]
["Z.forall(lambda x1: Z.equal(x1,'lhs','orientation'),X)"]
["Z.atleast(lambda x1: Z.atmost(lambda x2: Z.exists(lambda x3: Z.not_operator(Z.lequal(x1,x3,'size')),X),2,X),1,X)"]
["Z.exists(lambda x1: Z.and_operator(Z.equal(x1,1,'size'),Z.not_operator(Z.lequal(x1,3,'size'))),X)"]
["Z.exists(lambda x1: Z.forall(lambda x2: Z.atmost(lambda x3: Z.equal(x1,x3,'orientation'),2,X),X),X)"]
["Z.exists(lambda x1: Z.not_operator(Z.greater(x1,2,'size')),X)"]
["Z.exists(lambda x1: Z.equal(x1,'green','colour'),X)"]
