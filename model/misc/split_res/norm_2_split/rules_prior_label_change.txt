["Z.forall(lambda x1: Z.exactly(lambda x2: Z.exists(lambda x3: Z.not_operator(Z.and_operator(Z.not_operator(Z.less(x1,x3,'size')),Z.and_operator(Z.or_operator(Z.or_operator(Z.not_operator(Z.equal(x1,x3,'grounded')),Z.hor_operator(x3,x1,'contact')),Z.not_operator(Z.hor_operator(x1,x2,'contact'))),Z.not_operator(Z.not_operator(Z.equal(x1,'lhs','orientation')))))),X),2,X),X)"]
["Z.exists(lambda x1: Z.equal(x1,'strange','orientation'),X)"]
["Z.exists(lambda x1: Z.exists(lambda x2: Z.forall(lambda x3: Z.and_operator(Z.equal(x1,'blue','colour'),Z.lequal(x3,x1,'size')),X),X),X)"]
["Z.exists(lambda x1: Z.equal(x1,'green','colour'),X)"]
["Z.forall(lambda x1: Z.forall(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)"]
["Z.atmost(lambda x1: Z.equal(x1,'yes','grounded'),2,X)"]
["Z.exists(lambda x1: Z.exists(lambda x2: Z.or_operator(Z.and_operator(Z.not_operator(Z.and_operator(Z.hor_operator(x1,x2,'contact'),Z.lequal(x1,3,'size'))),Z.not_operator(Z.or_operator(Z.hor_operator(x1,x2,'contact'),Z.equal(x2,x1,'grounded')))),Z.and_operator(Z.less(x1,1,'size'),Z.or_operator(Z.not_operator(Z.lequal(x1,1,'size')),Z.not_operator(Z.less(x2,1,'size'))))),X),X)"]
["Z.forall(lambda x1: Z.exists(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.and_operator(Z.and_operator(Z.equal(x2,x1,'size'),Z.equal(x2,x3,'size')),Z.and_operator(Z.not_operator(Z.not_operator(Z.equal(x3,'yes','grounded'))),Z.equal(x1,x3,'grounded')))),X),X),X)"]
["Z.atleast(lambda x1: Z.or_operator(Z.not_operator(Z.greater(x1,1,'size')),Z.lequal(x1,2,'size')),1,X)"]
["Z.exists(lambda x1: Z.exactly(lambda x2: Z.not_operator(Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'strange','orientation'))))),2,X),X)"]
["Z.exists(lambda x1: Z.forall(lambda x2: Z.atmost(lambda x3: Z.lequal(x1,x2,'size'),3,X),X),X)"]
["Z.exactly(lambda x1: Z.forall(lambda x2: Z.exists(lambda x3: Z.greater(x2,2,'size'),X),X),2,X)"]
["Z.exists(lambda x1: Z.or_operator(Z.or_operator(Z.equal(x1,2,'size'),Z.or_operator(Z.or_operator(Z.not_operator(Z.equal(x1,'strange','orientation')),Z.not_operator(Z.equal(x1,'red','colour'))),Z.or_operator(Z.not_operator(Z.less(x1,3,'size')),Z.less(x1,3,'size')))),Z.not_operator(Z.greater(x1,2,'size'))),X)"]
["Z.exists(lambda x1: Z.forall(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)"]
["Z.forall(lambda x1: Z.equal(x1,'green','colour'),X)"]
["Z.exists(lambda x1: Z.grequal(x1,1,'size'),X)"]
["Z.exists(lambda x1: Z.forall(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)"]
["Z.forall(lambda x1: Z.less(x1,1,'size'),X)"]
["Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)"]
["Z.atmost(lambda x1: Z.greater(x1,1,'size'),1,X)"]
["Z.atmost(lambda x1: Z.equal(x1,'strange','orientation'),3,X)"]
["Z.exactly(lambda x1: Z.forall(lambda x2: Z.not_operator(Z.equal(x1,x2,'grounded')),X),2,X)"]
["Z.forall(lambda x1: Z.exists(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x1,x3,'orientation')),X),X),X)"]
["Z.forall(lambda x1: Z.forall(lambda x2: Z.atmost(lambda x3: Z.equal(x2,'rhs','orientation'),2,X),X),X)"]
["Z.forall(lambda x1: Z.not_operator(Z.equal(x1,1,'size')),X)"]
["Z.forall(lambda x1: Z.atleast(lambda x2: Z.atleast(lambda x3: Z.hor_operator(x3,x2,'contact'),2,X),2,X),X)"]
["Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)"]
["Z.forall(lambda x1: Z.less(x1,3,'size'),X)"]
["Z.exactly(lambda x1: Z.lequal(x1,3,'size'),3,X)"]
["Z.exists(lambda x1: Z.lequal(x1,3,'size'),X)"]
["Z.atmost(lambda x1: Z.less(x1,2,'size'),2,X)"]
["Z.atmost(lambda x1: Z.equal(x1,'yes','grounded'),1,X)"]
["Z.forall(lambda x1: Z.atmost(lambda x2: Z.forall(lambda x3: Z.hor_operator(x2,x3,'contact'),X),2,X),X)"]
["Z.forall(lambda x1: Z.forall(lambda x2: Z.exactly(lambda x3: Z.not_operator(Z.not_operator(Z.lequal(x2,2,'size'))),3,X),X),X)"]
["Z.exists(lambda x1: Z.exists(lambda x2: Z.not_operator(Z.and_operator(Z.and_operator(Z.hor_operator(x1,x2,'contact'),Z.less(x1,x2,'size')),Z.or_operator(Z.not_operator(Z.less(x2,1,'size')),Z.hor_operator(x1,x2,'contact')))),X),X)"]
["Z.forall(lambda x1: Z.grequal(x1,3,'size'),X)"]
["Z.forall(lambda x1: Z.less(x1,2,'size'),X)"]
["Z.exactly(lambda x1: Z.forall(lambda x2: Z.equal(x2,'no','grounded'),X),2,X)"]
["Z.atleast(lambda x1: Z.equal(x1,'no','grounded'),1,X)"]
["Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)"]
["Z.forall(lambda x1: Z.less(x1,1,'size'),X)"]
["Z.exists(lambda x1: Z.forall(lambda x2: Z.equal(x2,x1,'size'),X),X)"]
