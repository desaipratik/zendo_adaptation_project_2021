["Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)", "Z.exists(lambda x1: Z.not_operator(Z.equal(x1,2,'size')),X)"]
["Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)"]
["Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,1,'size'),X)"]
["Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),X)"]
["Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.and_operator(Z.equal(x1,'upright','orientation'),Z.and_operator(Z.equal(x2,'red','colour'),Z.equal(x2,'upright','orientation'))),X),2,X)"]
["Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)"]
["Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)", "Z.forall(lambda x1: Z.less(x1,3,'size'),X)"]
["Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'blue','colour'),X)"]
["Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)"]
["Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.exists(lambda x1: Z.lequal(x1,1,'size'),X)"]
["Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)"]
["Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)", "Z.exactly(lambda x1: Z.less(x1,2,'size'),2,X)"]
["Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)"]
["Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)", "Z.exactly(lambda x1: Z.exists(lambda x2: Z.equal(x2,1,'size'),X),3,X)"]
["Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),1,X)"]
["Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)", "Z.atmost(lambda x1: Z.not_operator(Z.not_operator(Z.not_operator(Z.equal(x1,'red','colour')))),2,X)"]
["Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'blue','colour'),X),X)"]
["Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,2,'size'),X)"]
["Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)"]
["Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)", "Z.exists(lambda x1: Z.less(x1,3,'size'),X)"]
["Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)", "Z.atmost(lambda x1: Z.exists(lambda x2: Z.equal(x1,x2,'orientation'),X),3,X)"]
["Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)"]
["Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)", "Z.exactly(lambda x1: Z.equal(x1,2,'size'),1,X)"]
["Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'green','colour'),1,X)"]
["Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)", "Z.forall(lambda x1: Z.exists(lambda x2: Z.hor_operator(x2,x1,'contact'),X),X)"]
["Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)", "Z.atleast(lambda x1: Z.or_operator(Z.equal(x1,'blue','colour'),Z.equal(x1,'green','colour')),1,X)"]
["Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)", "Z.exists(lambda x1: Z.exactly(lambda x2: Z.forall(lambda x3: Z.not_operator(Z.equal(x2,'upright','orientation')),X),3,X),X)"]
["Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.equal(x1,'lhs','orientation'),X),X)"]
["Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)"]
["Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)", "Z.atleast(lambda x1: Z.exists(lambda x2: Z.equal(x2,'blue','colour'),X),3,X)"]
["Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'red','colour'),1,X)"]
["Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'rhs','orientation'),1,X)"]
["Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)", "Z.exists(lambda x1: Z.and_operator(Z.equal(x1,'red','colour'),Z.equal(x1,'upright','orientation')),X)"]
["Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)"]
["Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)", "Z.exists(lambda x1: Z.forall(lambda x2: Z.forall(lambda x3: Z.equal(x2,'yes','grounded'),X),X),X)"]
["Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)", "Z.exists(lambda x1: Z.exists(lambda x2: Z.hor_operator(x1,x2,'contact'),X),X)"]
["Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)", "Z.exists(lambda x1: Z.equal(x1,2,'size'),X)"]
["Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)", "Z.exists(lambda x1: Z.equal(x1,'yes','grounded'),X)"]
["Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atleast(lambda x1: Z.equal(x1,'blue','colour'),1,X)"]
["Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)", "Z.exists(lambda x1: Z.equal(x1,'red','colour'),X)"]
["Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)", "Z.atmost(lambda x1: Z.equal(x1,'blue','colour'),1,X)"]
["Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)", "Z.forall(lambda x1: Z.lequal(x1,1,'size'),X)"]
